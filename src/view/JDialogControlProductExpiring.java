/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.Bean;
import action.BeanProductTransition;
import action.BeanTbl;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassInventory;
import reports.ImprimirRelatorio_cupom;
import util.DateActual;
import xml.NewXML;

/**
 *
 * @author rafael
 */
public class JDialogControlProductExpiring extends javax.swing.JDialog {

    private MyModelJTableProductExipiring jTableProductExipiring;
    private static final List<String> listBarCodeTable = new ArrayList<>();
    private static String parBarCodes = null;
    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    private final Bean bean = new Bean();
    private static final List<String> listCodLot = new ArrayList<>();
    private static final NewXML newXML = new NewXML();

    /**
     * Creates new form JDialogControleRetorno
     *
     * @param parent
     * @param modal
     */
    public JDialogControlProductExpiring(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogConfigureNotification = new javax.swing.JDialog();
        jComboBoxDaysForNotification = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabelDaysForAlert = new javax.swing.JLabel();
        jPanelBackground = new javax.swing.JPanel();
        jPanelTable = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxDaysForExpiring = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabelActualDay = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLots = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButtonVisualizarImpressao = new javax.swing.JButton();
        jButtonImprimirSelecionado = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jButtonSair1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemViewPrint = new javax.swing.JMenuItem();
        jMenuItemPrintSelected = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemConfigureNotification = new javax.swing.JMenuItem();
        jMenuItemSetLotVerify = new javax.swing.JMenuItem();
        jMenuItemReverseSetLotVerify = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();

        jDialogConfigureNotification.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        jDialogConfigureNotification.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                jDialogConfigureNotificationWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jDialogConfigureNotificationWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jDialogConfigureNotificationWindowOpened(evt);
            }
        });

        jComboBoxDaysForNotification.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jComboBoxDaysForNotification.setForeground(new java.awt.Color(102, 102, 102));
        jComboBoxDaysForNotification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30", "60", "90", "120", "150", "180", "365" }));
        jComboBoxDaysForNotification.setToolTipText("Salvar [Enter]");
        jComboBoxDaysForNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDaysForNotificationActionPerformed(evt);
            }
        });
        jComboBoxDaysForNotification.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxDaysForNotificationKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("dias");

        jLabel4.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Selecione o intervalo de dias para notificação de vencimento do produto:");

        jLabelDaysForAlert.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jLabelDaysForAlert.setForeground(new java.awt.Color(204, 102, 0));
        jLabelDaysForAlert.setText("Selecione o intervalo de dias para notificação de vencimento do produto:");

        javax.swing.GroupLayout jDialogConfigureNotificationLayout = new javax.swing.GroupLayout(jDialogConfigureNotification.getContentPane());
        jDialogConfigureNotification.getContentPane().setLayout(jDialogConfigureNotificationLayout);
        jDialogConfigureNotificationLayout.setHorizontalGroup(
            jDialogConfigureNotificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConfigureNotificationLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jDialogConfigureNotificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelDaysForAlert)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxDaysForNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jDialogConfigureNotificationLayout.setVerticalGroup(
            jDialogConfigureNotificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogConfigureNotificationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogConfigureNotificationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxDaysForNotification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jLabelDaysForAlert)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Vencimento de Lotes");
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelBackground.setLayout(new java.awt.BorderLayout());

        jPanelTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelTable.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Selecione o intervalo de dias até o vencimento do produto:");

        jComboBoxDaysForExpiring.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jComboBoxDaysForExpiring.setForeground(new java.awt.Color(102, 102, 102));
        jComboBoxDaysForExpiring.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "30", "60", "90", "120", "150", "180", "365" }));
        jComboBoxDaysForExpiring.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxDaysForExpiringItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 2, 17)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("dias");

        jLabelActualDay.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jLabelActualDay.setForeground(new java.awt.Color(102, 0, 0));
        jLabelActualDay.setText("Data atual:00/00/0000");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxDaysForExpiring, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                .addComponent(jLabelActualDay)
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxDaysForExpiring, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabelActualDay))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelTable.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanelBackground.add(jPanelTable, java.awt.BorderLayout.CENTER);

        jTableLots.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableLots.setDefaultRenderer(Object.class, new MyCellRenderer());
        jTableLots.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableLotsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableLots);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jButtonVisualizarImpressao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonVisualizarImpressao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[010680].png"))); // NOI18N
        jButtonVisualizarImpressao.setText("Vizualizar impressão [Ctrl+P]");
        jButtonVisualizarImpressao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVisualizarImpressaoActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonVisualizarImpressao);

        jButtonImprimirSelecionado.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonImprimirSelecionado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[010681].png"))); // NOI18N
        jButtonImprimirSelecionado.setText("   Imprimir Selecionado(s) [Ctrl+Alt+P]");
        jButtonImprimirSelecionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirSelecionadoActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonImprimirSelecionado);

        jButtonSair.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[010987] - Cópia.png"))); // NOI18N
        jButtonSair.setText("   Selecionar Todos [Crtl+A]");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonSair);

        jButtonSair1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonSair1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/1402737422_door_out.png"))); // NOI18N
        jButtonSair1.setText("   Sair [Esc]");
        jButtonSair1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSair1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonSair1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanelBackground.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanelBackground, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("Ações");

        jMenuItemViewPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemViewPrint.setText("Visualizar Impressão");
        jMenuItemViewPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewPrintActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemViewPrint);

        jMenuItemPrintSelected.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPrintSelected.setText("Imprimir Selecionados");
        jMenuItemPrintSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintSelectedActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemPrintSelected);

        jMenuItemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemSelectAll.setText("Selecionar Todos");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSelectAll);

        jMenuItemConfigureNotification.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItemConfigureNotification.setText("Configurar Notificação");
        jMenuItemConfigureNotification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConfigureNotificationActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemConfigureNotification);

        jMenuItemSetLotVerify.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        jMenuItemSetLotVerify.setText("Marcar Lote Verificado");
        jMenuItemSetLotVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSetLotVerifyActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSetLotVerify);

        jMenuItemReverseSetLotVerify.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemReverseSetLotVerify.setText("Marcar Lote Como Não Verificado");
        jMenuItemReverseSetLotVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReverseSetLotVerifyActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemReverseSetLotVerify);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemExit.setText("Sair");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jLabelDaysForAlert.setText("Configurado para avisar antes de " + ClassInventory.verifyExpiringLot() + " dias para o vencimento.");
        jLabelActualDay.setText("Data atual: " + DateActual.setDate(new Date(), "dd/MM/yyyy"));
    }//GEN-LAST:event_formWindowOpened

    private void jComboBoxDaysForExpiringItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxDaysForExpiringItemStateChanged
        Object parDay = jComboBoxDaysForExpiring.getSelectedItem();
        BeanTbl.setPar((String) parDay);
        try {
            jTableProductExipiring = new MyModelJTableProductExipiring(false);
            jTableLots.setModel(jTableProductExipiring);
        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jComboBoxDaysForExpiringItemStateChanged

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        jComboBoxDaysForExpiring.setSelectedItem(ClassInventory.verifyDaysForAlertExpiringLot().toString());
        Object parDay = jComboBoxDaysForExpiring.getSelectedItem();
        BeanTbl.setPar((String) parDay);
        try {
            jTableProductExipiring = new MyModelJTableProductExipiring(false);
            jTableLots.setModel(jTableProductExipiring);
        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }

    }//GEN-LAST:event_formWindowActivated

    private void jButtonVisualizarImpressaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVisualizarImpressaoActionPerformed

        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listBarCodeTable.add((String) jTableLots.getValueAt(i, 1));
                listCodLot.add("'" + (String) jTableLots.getValueAt(i, 2) + "'");
            }
        }
        if (listBarCodeTable.size() > 0) {

            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionViewPrintOnDialogExpiring", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

            try {
                jTableProductExipiring = new MyModelJTableProductExipiring(false);
                jTableLots.setModel(jTableProductExipiring);
            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonVisualizarImpressaoActionPerformed

    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionSelectAll", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonImprimirSelecionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirSelecionadoActionPerformed
        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listBarCodeTable.add((String) jTableLots.getValueAt(i, 1));
                listCodLot.add("'" + (String) jTableLots.getValueAt(i, 2) + "'");
            }

        }
        if (listBarCodeTable.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionPrintSelectedOnDialogExpiring", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
            try {
                jTableProductExipiring = new MyModelJTableProductExipiring(false);
                jTableLots.setModel(jTableProductExipiring);
            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonImprimirSelecionadoActionPerformed

    private void jTableLotsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableLotsMouseClicked
        if (evt.getClickCount() == 2) {
            
            BeanProductTransition.setControl(true);
            BeanProductTransition.setCode(jTableLots.getValueAt(jTableLots.getSelectedRow(), 1).toString());
            new JDialogProduct_2_0(null, true).setVisible(true);

        }
    }//GEN-LAST:event_jTableLotsMouseClicked

    private void jButtonSair1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSair1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonSair1ActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionSelectAllOnDialogExpiring", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jMenuItemViewPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewPrintActionPerformed
        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listBarCodeTable.add((String) jTableLots.getValueAt(i, 1));
            }

        }
        if (listBarCodeTable.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionViewPrintOnDialogExpiring", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemViewPrintActionPerformed

    private void jMenuItemPrintSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintSelectedActionPerformed
        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listBarCodeTable.add((String) jTableLots.getValueAt(i, 1));
            }

        }
        if (listBarCodeTable.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionPrintSelectedOnDialogExpiring", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemPrintSelectedActionPerformed

    private void jComboBoxDaysForNotificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDaysForNotificationActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionSetDaysForAlertExipiring", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jComboBoxDaysForNotificationActionPerformed

    private void jMenuItemSetLotVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSetLotVerifyActionPerformed

        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listCodLot.add("'" + (String) jTableLots.getValueAt(i, 2) + "'");
            }
        }

        if (listCodLot.size() > 0) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente realizar esta operação manualmente?\n É importante imprimir o relatório de controle primeiro.\nCom isso o controle verificação sera setado automaticamente.", "Alerta!", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                    Method something
                            = this.getClass().getDeclaredMethod("functionSetLotVerify", new Class[0]);

                    ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
                } catch (NoSuchMethodException | SecurityException ex) {
                    System.err.println("ERROR::" + ex);
                    //newXML.generateLog(ex.toString());
                }
                try {
                    jTableProductExipiring = new MyModelJTableProductExipiring(false);
                    jTableLots.setModel(jTableProductExipiring);
                } catch (Exception ex) {
                    System.err.println("ERROR::" + ex);
                    ////newXML.generateLog(ex.toString());
                }
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItemSetLotVerifyActionPerformed

    private void jDialogConfigureNotificationWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogConfigureNotificationWindowOpened
        jLabelDaysForAlert.setText("Configurado para avisar antes de " + ClassInventory.verifyDaysForAlertExpiringLot() + " dias para o vencimento.");
        jComboBoxDaysForNotification.setSelectedItem(ClassInventory.verifyDaysForAlertExpiringLot().toString());
    }//GEN-LAST:event_jDialogConfigureNotificationWindowOpened

    private void jMenuItemConfigureNotificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConfigureNotificationActionPerformed
        Dimension tamanhoDialogMain = getSize();
        Dimension tamanhoDialog1 = jDialogConfigureNotification.getPreferredSize();
        Point loc = getLocation();
        jDialogConfigureNotification.setLocation(
                (tamanhoDialogMain.width - tamanhoDialog1.width) / 2 + loc.x,
                (tamanhoDialogMain.height - tamanhoDialog1.height) / 2 + loc.y);
        jDialogConfigureNotification.setModal(true);
        jDialogConfigureNotification.pack();
        jDialogConfigureNotification.setVisible(true);
    }//GEN-LAST:event_jMenuItemConfigureNotificationActionPerformed

    private void jMenuItemReverseSetLotVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReverseSetLotVerifyActionPerformed
        for (int i = 0; i < jTableLots.getRowCount(); i++) {

            if (jTableLots.getValueAt(i, 0).equals(true)) {
                listCodLot.add("'" + (String) jTableLots.getValueAt(i, 2) + "'");
            }
        }

        if (listCodLot.size() > 0) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente realizar esta operação?\n Ao faze-lo este produto voltara a lista de produtos em alerta de vencimento.", "Aviso", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                try {
                    Method something
                            = this.getClass().getDeclaredMethod("functionSetReverseLotVerify", new Class[0]);

                    ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
                } catch (NoSuchMethodException | SecurityException ex) {
                    System.err.println("ERROR::" + ex);
                    //newXML.generateLog(ex.toString());
                }
                try {
                    jTableProductExipiring = new MyModelJTableProductExipiring(false);
                    jTableLots.setModel(jTableProductExipiring);
                } catch (Exception ex) {
                    System.err.println("ERROR::" + ex);
                    ////newXML.generateLog(ex.toString());
                }
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_jMenuItemReverseSetLotVerifyActionPerformed

    private void jComboBoxDaysForNotificationKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxDaysForNotificationKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jDialogConfigureNotification.dispose();
        }
    }//GEN-LAST:event_jComboBoxDaysForNotificationKeyPressed

    private void jDialogConfigureNotificationWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogConfigureNotificationWindowActivated
        jComboBoxDaysForNotification.setSelectedItem(ClassInventory.verifyDaysForAlertExpiringLot().toString());

    }//GEN-LAST:event_jDialogConfigureNotificationWindowActivated

    private void jDialogConfigureNotificationWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogConfigureNotificationWindowClosed
        jComboBoxDaysForExpiring.setSelectedItem(ClassInventory.verifyDaysForAlertExpiringLot().toString());
    }//GEN-LAST:event_jDialogConfigureNotificationWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogControlProductExpiring.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogControlProductExpiring dialog = new JDialogControlProductExpiring(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonImprimirSelecionado;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSair1;
    private javax.swing.JButton jButtonVisualizarImpressao;
    private javax.swing.JComboBox jComboBoxDaysForExpiring;
    private javax.swing.JComboBox jComboBoxDaysForNotification;
    private javax.swing.JDialog jDialogConfigureNotification;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelActualDay;
    private javax.swing.JLabel jLabelDaysForAlert;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemConfigureNotification;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemPrintSelected;
    private javax.swing.JMenuItem jMenuItemReverseSetLotVerify;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JMenuItem jMenuItemSetLotVerify;
    private javax.swing.JMenuItem jMenuItemViewPrint;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBackground;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableLots;
    // End of variables declaration//GEN-END:variables

    public void functionViewPrintOnDialogExpiring() {

        parBarCodes = listBarCodeTable.toString().replace("[", "(").replace("]", ")");

        try {

            Object[] parArg = {"  i.`prod_bar_code_product`  IN" + parBarCodes};
            Object[] parID = {"PAR_ARG"};
            ImprimirRelatorio_cupom ip = new ImprimirRelatorio_cupom();
            ip.visualizarRelatorio(parArg, parID, "reportProductListControlExpiring.jasper", true);

        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
        }

        if (listCodLot.size() > 0) {
            ClassInventory.setLotVerifyControl(listCodLot, true);
        }

        listBarCodeTable.clear();
        listCodLot.clear();
        parBarCodes = null;

    }

    public void functionSetDaysForAlertExipiring() {

        if (ClassInventory.setDaysForAlertExipiring(jComboBoxDaysForNotification.getSelectedItem().toString())) {
            //JOptionPane.showMessageDialog(null, "Dias até o vencimento de Lote configurado com sucesso.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
            jLabelDaysForAlert.setText("Configurado para avisar antes de " + ClassInventory.verifyDaysForAlertExpiringLot() + " dias para o vencimento.");

        } else {
            // JOptionPane.showMessageDialog(null, "Erro ao configurar vencimento de Lote.\n Tente novamente.", "Erro!", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void functionPrintSelectedOnDialogExpiring() {

        parBarCodes = listBarCodeTable.toString().replace("[", "(").replace("]", ")");

        try {

            Object[] parArg = {"  i.`prod_bar_code_product`  IN" + parBarCodes};
            Object[] parID = {"PAR_ARG"};
            ImprimirRelatorio_cupom ip = new ImprimirRelatorio_cupom();
            ip.visualizarRelatorio(parArg, parID, "reportProductListControlExpiring.jasper", false);

        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
        }
        // if (list_arg.size() > 0) {
        //    ClassInventory.setLotVerifyControl(list_arg, true);
        // }
        listBarCodeTable.clear();
        listCodLot.clear();
        parBarCodes = null;

    }

    public void functionSelectAllOnDialogExpiring() {
        Object parDay = jComboBoxDaysForExpiring.getSelectedItem();
        BeanTbl.setPar((String) parDay);
        try {
            jTableProductExipiring = new MyModelJTableProductExipiring(true);
            jTableLots.setModel(jTableProductExipiring);
        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }
    }

    public void functionSetLotVerify() {

        if (ClassInventory.setLotVerifyControl(listCodLot, true)) {
            //JOptionPane.showMessageDialog(null, "Configuração gravada com sucesso.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);

        } else {
            // JOptionPane.showMessageDialog(null, "Erro ao configurar informação do Lote.\n Tente novamente.", "Erro!", JOptionPane.ERROR_MESSAGE);
        }
        listCodLot.clear();
    }

    public void functionSetReverseLotVerify() {

        if (ClassInventory.setLotVerifyControl(listCodLot, false)) {
            //JOptionPane.showMessageDialog(null, "Configuração gravada com sucesso.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);

        } else {
            // JOptionPane.showMessageDialog(null, "Erro ao configurar informação do Lote.\n Tente novamente.", "Erro!", JOptionPane.ERROR_MESSAGE);
        }
        listCodLot.clear();
    }

    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            Color bg;

            if (!selected) {
                bg = ((row % 2 == 0)
                        ? alternateColor
                        : whiteColor);
            } else {
                bg = selectedColor;
            }

            if (jTableLots.getRowCount() > 0) {

                jTableLots.getColumnModel().getColumn(0).setPreferredWidth(5);// define a largura da coluna
                jTableLots.getColumnModel().getColumn(1).setPreferredWidth(65);
                jTableLots.getColumnModel().getColumn(2).setPreferredWidth(80);
                jTableLots.getColumnModel().getColumn(3).setPreferredWidth(250);
                jTableLots.getColumnModel().getColumn(4).setPreferredWidth(75);
                jTableLots.getColumnModel().getColumn(5).setPreferredWidth(65);
                jTableLots.getColumnModel().getColumn(6).setPreferredWidth(35);
                jTableLots.getColumnModel().getColumn(7).setPreferredWidth(65);
                jTableLots.getColumnModel().getColumn(8).setPreferredWidth(60);
                jTableLots.getColumnModel().getColumn(9).setPreferredWidth(60);
                jTableLots.getColumnModel().getColumn(10).setPreferredWidth(10);
            }

            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);
            setBackground(bg);
            setForeground(selected
                    ? Color.black
                    : new java.awt.Color(102, 102, 102));
            setHorizontalAlignment(SwingConstants.CENTER);

            /*
             *  if (value instanceof ImageIcon) {
             * setIcon((ImageIcon) value);
             * setText("");
             * } else
             * setIcon(null);
             */
            return this;
        }
    }
}

/*

   
 */

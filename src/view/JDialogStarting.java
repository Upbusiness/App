/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.BeanConfig;
import action.Config;
import java.awt.Desktop;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.ClassUser;
import model.Conn;
import xml.NewXML;

/**
 *
 * @author Rafael Recalcatti
 */
public class JDialogStarting extends javax.swing.JDialog {

    public static int nrloop, numeros;
    public static Connection conn = null;
    public static Config config = new Config();
    private static final List<String> listCodCoupons = new ArrayList<>();
    private static final NewXML newXML = new NewXML();
    private final BeanConfig bc = new BeanConfig();

    /**
     * Creates new form JDialogStarting
     *
     * @param parent
     * @param modal
     */
    public JDialogStarting(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelLoadingMessage = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabelLoadingMessage1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabelLoadingMessage.setBackground(new java.awt.Color(255, 255, 255));
        jLabelLoadingMessage.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLoadingMessage.setText(" ");
        jLabelLoadingMessage.setToolTipText("");
        getContentPane().add(jLabelLoadingMessage);
        jLabelLoadingMessage.setBounds(10, 270, 250, 20);

        jProgressBar1.setBackground(new java.awt.Color(0, 0, 0));
        jProgressBar1.setForeground(new java.awt.Color(0, 153, 153));
        jProgressBar1.setBorderPainted(false);
        getContentPane().add(jProgressBar1);
        jProgressBar1.setBounds(0, 290, 460, 10);

        jLabelLoadingMessage1.setBackground(new java.awt.Color(255, 255, 255));
        jLabelLoadingMessage1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelLoadingMessage1.setText("MANAGER  Version 1.1.3.3");
        jLabelLoadingMessage1.setToolTipText("");
        getContentPane().add(jLabelLoadingMessage1);
        jLabelLoadingMessage1.setBounds(310, 270, 140, 20);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/fundo upmarket.png"))); // NOI18N
        jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, -50, 460, 350);

        setSize(new java.awt.Dimension(456, 299));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

        nrloop = 100;

        new Thread() {
            private URI uri;

            @Override
            public void run() {

                if (nrloop < 100) {
                    jProgressBar1.setMaximum(nrloop);
                }
                try {
                    for (int i = 0; i <= nrloop; i += 15) {

                        sleep(1000);

                        switch (i) {

                            case 30:
                                jProgressBar1.setValue(i);
                                fn1();
                                break;

                            case 60:
                                jProgressBar1.setValue(i);
                                fn2();
                                break;

                            case 75:
                                jProgressBar1.setValue(i);
                                fn3();
                                break;

                            default:
                                break;

                        }
                    }
                    dispose();
                    if (ClassUser.validTerminal()) {
                        if (JOptionPane.showConfirmDialog(null, "Sua Licença de uso expirou.\nDeseja registrar seu Systema de frente de caixa (PDV)? ", "Mensagem", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {

                            try {
                                uri = new URI("http://www.google.com.br/");
                                fnOpenURL(uri);
                            } catch (URISyntaxException ex) {
                                System.err.println("ERROR::" + ex);
                                //newXML.generateLog(ex.toString());
                            }

                            new JDialogRegisterSoftware(null, true).setVisible(true);

                        } else {

                            System.exit(0);

                        }
                    } else {
                        new JDialogLogin(null, true).setVisible(true);
                    }

                } catch (InterruptedException ex) {
                    System.err.println("ERROR::" + ex);
                    //newXML.generateLog(ex.toString());
                    Logger.getLogger(this.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }.start();

    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogStarting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogStarting dialog = new JDialogStarting(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JLabel jLabelLoadingMessage;
    private javax.swing.JLabel jLabelLoadingMessage1;
    public static javax.swing.JProgressBar jProgressBar1;
    // End of variables declaration//GEN-END:variables

    private static void fn1() {
        int count = 0;
        do {

            jLabelLoadingMessage.setText("Carregando endereço IP...");
            config.setIp(BeanConfig.getIp());
            config.setDir(BeanConfig.getPath());
            System.err.println("IP load:" + config.getIp());
            System.err.println("Dir load:" + config.getDir());
            System.out.println("isPrint Service On Starting:" + BeanConfig.isIsPrintService());
            jProgressBar1.setValue(30);
            count++;
            if (count == 30) {
                jLabelLoadingMessage.setText("Erro ao carregar o endereço IP.");
                JOptionPane.showMessageDialog(null, " Erro na leitura do endereço ip. \n Verifique o arquivo 'ips.xml' na pasta do sistema.", "Alerta!", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } while (config.getIp() == null);

        jLabelLoadingMessage.setText("Endereço IP carregado com sucesso.");
    }

    private static void fn2() {

        int count = 0;
        do {

            jLabelLoadingMessage.setText("Conectando ao Banco Dados...");
            conn = Conn.connect();
            jProgressBar1.setValue(60);
            count++;

            if (count == 30) {

                jLabelLoadingMessage.setText("Erro ao conectar o endereço IP.");
                JOptionPane.showMessageDialog(null, " Erro ao conectar ao banco de dados. \n Verifique sua conexão.", "Alerta!", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } while (conn == null);

        jLabelLoadingMessage.setText("Conexão estabelecida com sucesso.");

    }

    private static void fn3() {
        int count = 0;
        do {
            jLabelLoadingMessage.setText("Executando tarefas adicionais...");
            jProgressBar1.setValue(90);

            count++;
            if (count == 30) {
                jLabelLoadingMessage.setText("Erro ao executar tarefas adicionais.");
                JOptionPane.showMessageDialog(null, " Erro desconhecido. \n Contate o administrador do sistema.", "Alerta!", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        } while (listCodCoupons == null);

        jLabelLoadingMessage.setText("Tarefa adicional executada com sucesso.");

        jLabelLoadingMessage.setText("Finalizando tarefas...");
        jProgressBar1.setValue(100);

    }

    private void fnOpenURL(URI uri) {
        if (Desktop.isDesktopSupported()) {

            Desktop desktop = Desktop.getDesktop();
            try {
                desktop.browse(uri);

            } catch (IOException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        } else {
            System.err.println("Erro de compatibilidade.");
        }
    }
    
}

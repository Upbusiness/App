/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.Bean;
import action.BeanLogin;
import action.Client;
import action.Sale;
import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassClient;
import model.ClassSale;
import util.Mascaras;
import static view.JFrameSale_1.codeCoupon;
import xml.NewXML;

/**
 *
 * @author Rafiusks
 */
public class JDialogClient extends javax.swing.JDialog {

    private static boolean isEditing = false;
    private static boolean isNewRegister = false;
    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    private static final NewXML newXML = new NewXML();
    private MyModelJtableClient myModelJtableClient;
    private static final String[] heads = {"CPF", "NOME"};
    private Client client = new Client();
    private static boolean isRegistredAccount = false;
    private static final DecimalFormat v = new DecimalFormat("0.00");
    private String old_cpf;

    /**
     * Creates new form JDialogCostOperate
     *
     * @param parent
     * @param modal
     */
    public JDialogClient(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jPanel1 = new javax.swing.JPanel();
        jTextAddress = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableClient = new javax.swing.JTable();
        jTextName = new javax.swing.JTextField();
        jTextFieldDistrict = new javax.swing.JTextField();
        jFormattedTextFieldCPF = new javax.swing.JFormattedTextField(Mascaras.maskCPF());
        jFormattedTextFieldPhone = new javax.swing.JFormattedTextField(Mascaras.maskCel());
        jTextFieldCity = new javax.swing.JTextField();
        jTextFieldId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButtonSaveClient = new javax.swing.JButton();
        jButtonNewClient = new javax.swing.JButton();
        jButtonExitClient = new javax.swing.JButton();
        jButtonDeleteClient = new javax.swing.JButton();
        jButtonEditClient = new javax.swing.JButton();
        jButtonCancelClient = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Clientes");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextAddress.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jTextAddress.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Endere√ßo:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.address_client}"), jTextAddress, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextAddressActionPerformed(evt);
            }
        });

        jTableClient.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableClient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableClient.setRowHeight(25);
        jTableClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableClientMouseClicked(evt);
            }
        });
        jTableClient.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableClientKeyPressed(evt);
            }
        });
        jTableClient.setDefaultRenderer(Object.class, new MyCellRenderer());
        jScrollPane1.setViewportView(jTableClient);

        jTextName.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jTextName.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nome:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.name_client}"), jTextName, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNameActionPerformed(evt);
            }
        });

        jTextFieldDistrict.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldDistrict.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bairro:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.district_client}"), jTextFieldDistrict, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldDistrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDistrictActionPerformed(evt);
            }
        });

        jFormattedTextFieldCPF.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CPF:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jFormattedTextFieldCPF.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.cpf_client}"), jFormattedTextFieldCPF, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jFormattedTextFieldCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldCPFActionPerformed(evt);
            }
        });

        jFormattedTextFieldPhone.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fone:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jFormattedTextFieldPhone.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.phone_client}"), jFormattedTextFieldPhone, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        jFormattedTextFieldPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextFieldPhoneActionPerformed(evt);
            }
        });

        jTextFieldCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldCity.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cidade:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.city_client}"), jTextFieldCity, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCityActionPerformed(evt);
            }
        });

        jTextFieldId.setEditable(false);
        jTextFieldId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldId.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ID:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextFieldId.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${client.idtbl_client}"), jTextFieldId, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jTextFieldId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIdActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[012219].png"))); // NOI18N
        jButton1.setText("Pendurar");
        jButton1.setDoubleBuffered(true);
        jButton1.setEnabled(false);
        jButton1.setHideActionText(true);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jTextFieldDistrict, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 279, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTextFieldCity))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jFormattedTextFieldCPF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 193, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jFormattedTextFieldPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTextFieldId))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jTextAddress))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jFormattedTextFieldCPF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jFormattedTextFieldPhone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(13, 13, 13)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jTextName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(13, 13, 13)
                        .add(jTextAddress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextFieldDistrict, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldCity, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setLayout(new java.awt.BorderLayout());

        jButtonSaveClient.setText("Salvar");
        jButtonSaveClient.setEnabled(false);
        jButtonSaveClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveClientActionPerformed(evt);
            }
        });

        jButtonNewClient.setText("Novo");
        jButtonNewClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewClientActionPerformed(evt);
            }
        });

        jButtonExitClient.setText("Sair");
        jButtonExitClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitClientActionPerformed(evt);
            }
        });

        jButtonDeleteClient.setText("Excluir");
        jButtonDeleteClient.setEnabled(false);
        jButtonDeleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteClientActionPerformed(evt);
            }
        });

        jButtonEditClient.setText("Editar");
        jButtonEditClient.setEnabled(false);
        jButtonEditClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditClientActionPerformed(evt);
            }
        });

        jButtonCancelClient.setText("Cancelar");
        jButtonCancelClient.setEnabled(false);
        jButtonCancelClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelClientActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 594, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(10, 10, 10))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jButtonSaveClient, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonCancelClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonEditClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonNewClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonDeleteClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonExitClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonSaveClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jButtonDeleteClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButtonExitClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButtonNewClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButtonEditClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jButtonCancelClient, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        bindingGroup.bind();

        setSize(new java.awt.Dimension(659, 623));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewClientActionPerformed
        fnNewClient();
    }//GEN-LAST:event_jButtonNewClientActionPerformed

    private void jButtonSaveClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveClientActionPerformed

        if (!fnValidClient(jFormattedTextFieldCPF.getText())) {
            JOptionPane.showMessageDialog(this, "CPF inv√°lido.\nVerifique.", "Cadastro",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {

            if (isNewRegister) {

                if (!ClassClient.consultCPF(jFormattedTextFieldCPF.getText())) {
                    
                    if (jTextName.getText().isEmpty() || fnValidCel(jFormattedTextFieldPhone.getText())) {
                        JOptionPane.showMessageDialog(this, "Nome e/ou celular n√£o pode ficar em branco.", "Aviso",
                                JOptionPane.INFORMATION_MESSAGE);
                    } else {

                        if (ClassClient.newClient(getClient())) {

                            JOptionPane.showMessageDialog(this, "Cliente cadastrado com sucesso.", "Novo Cadastro",
                                    JOptionPane.INFORMATION_MESSAGE);
                            activeFields(false);
                            jButtonNewClient.setEnabled(true);
                            isNewRegister = false;
                            isEditing = false;
                            clearFields();
                            activeFields(false);
                            jButtonDeleteClient.setEnabled(false);
                            jButtonNewClient.setEnabled(true);
                            jButtonEditClient.setEnabled(false);
                            jButtonSaveClient.setEnabled(false);
                            jButtonCancelClient.setEnabled(false);

                        } else {
                            JOptionPane.showMessageDialog(this, "Erro ao cadastrar cliente", "Novo Cadastro",
                                    JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "CPF j√° cadastrado.\nVerifique.", "Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                }

            } else {

                if (JOptionPane.showConfirmDialog(this, "Deseja realmente atualizar este cadastro?", "Aviso!", JOptionPane.YES_NO_OPTION) == 0) {
                    if (ClassClient.refreshClient(getClient())) {
                        JOptionPane.showMessageDialog(this, "Cadastro de Cliente atualizado com sucesso!", "Atualiza√ß√£o de Cadastro",
                                JOptionPane.INFORMATION_MESSAGE);
                    }

                    clearFields();
                    activeFields(false);
                    jButtonDeleteClient.setEnabled(false);
                    jButtonNewClient.setEnabled(true);
                    jButtonEditClient.setEnabled(false);
                    jButtonSaveClient.setEnabled(false);
                    jButtonCancelClient.setEnabled(false);

                }
            }

            functionFillTableClient();
        }
    }//GEN-LAST:event_jButtonSaveClientActionPerformed

    private void jButtonExitClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitClientActionPerformed

        isNewRegister = false;
        Bean.setBean(null);
        this.dispose();

    }//GEN-LAST:event_jButtonExitClientActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        Object _cod_coupon = Bean.getBean();

        functionFillTableClient();
        activeFields(false);

        if (_cod_coupon != null) {

            System.err.println("CODECOUPON:::::::" + _cod_coupon);
            jFormattedTextFieldCPF.setEnabled(true);
            jTextName.setEnabled(true);
            jFormattedTextFieldCPF.requestFocus(true);
            jButton1.setEnabled(true);
        }

    }//GEN-LAST:event_formWindowOpened

    private void jTableClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableClientMouseClicked

        if (jTableClient.getModel().getRowCount() > 0) {
            if (evt.getClickCount() == 1) {
                setClient(ClassClient.consultClient(jTableClient.getValueAt(jTableClient.getSelectedRow(), 0).toString()));
                jButtonDeleteClient.setEnabled(true);
                activeFields(false);
                jButtonNewClient.setEnabled(true);
                jButtonEditClient.setEnabled(true);

            } else if (evt.getClickCount() == 2) {

                Bean.setBean(client.getIdtbl_client());
                if (!BeanLogin.isIsAccessRestrict()) {
                    JOptionPane.showMessageDialog(this, "Usu√°rio '"
                            + BeanLogin.getUser()
                            + "' n√£o possui autoriza√ß√£o para esta fun√ß√£o.\n",
                            "Mensagem de Seguran√ßa.", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    System.err.println("BEAN ON DIALOG CLIENT::" + Bean.getBean());
                    new JDialogAccountClient(null, true).setVisible(true);
                }

            }
        }

    }//GEN-LAST:event_jTableClientMouseClicked

    private void jButtonDeleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteClientActionPerformed

        if (!jFormattedTextFieldCPF.getText().isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este cadastro?", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                if (ClassClient.deleteClient(jTextFieldId.getText())) {
                    JOptionPane.showMessageDialog(this, "Cadastro de cliente excluido com sucesso!", "Exclus√£o de Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                    functionFillTableClient();
                    clearFields();
                    activeFields(false);
                    jButtonDeleteClient.setEnabled(false);
                    jButtonNewClient.setEnabled(true);
                    jButtonEditClient.setEnabled(false);
                    jButtonSaveClient.setEnabled(false);
                    jButtonCancelClient.setEnabled(false);
                } else {

                    JOptionPane.showMessageDialog(this, "Este cadastro de cliente n√£o pode ser excluido.\nConsulte o administrador do sistema.", "Exclus√£o de Cadastro",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonDeleteClientActionPerformed

    private void jButtonEditClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditClientActionPerformed

        if (!BeanLogin.isIsAccessRestrict()) {
            JOptionPane.showMessageDialog(this, "Usu√°rio '"
                    + BeanLogin.getUser()
                    + "' n√£o possui autoriza√ß√£o para esta fun√ß√£o.\n",
                    "Mensagem de Seguran√ßa.", JOptionPane.INFORMATION_MESSAGE);
        } else {

            old_cpf = jFormattedTextFieldCPF.getText();
            if (fnValidClient(old_cpf)) {
                isEditing = true;
                activeFields(isEditing);
                jTextName.requestFocus(true);
                jButtonEditClient.setEnabled(false);
                jButtonCancelClient.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jButtonEditClientActionPerformed

    private void jButtonCancelClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelClientActionPerformed
        clearFields();
        activeFields(false);
        isEditing = false;
        isNewRegister = false;
        jButtonDeleteClient.setEnabled(false);
        jButtonNewClient.setEnabled(true);
        jButtonEditClient.setEnabled(false);
        jButtonSaveClient.setEnabled(false);
        jButtonCancelClient.setEnabled(false);
        Bean.setBean(null);

    }//GEN-LAST:event_jButtonCancelClientActionPerformed

    private void jTableClientKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableClientKeyPressed
        if (jTableClient.getRowCount() > 0) {

            switch (evt.getKeyCode()) {

                case KeyEvent.VK_DOWN:
                    try {
                        String arg = jTableClient.getValueAt(jTableClient.getSelectedRow() + 1, 0).toString();
                        setClient(ClassClient.consultClient(arg));
                        jTableClient.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableClient.getValueAt(jTableClient.getSelectedRow(), 0).toString();
                        setClient(ClassClient.consultClient(arg));
                        activeFields(false);
                        jButtonDeleteClient.setEnabled(true);
                        jButtonSaveClient.setEnabled(false);
                        jButtonNewClient.setEnabled(true);
                        jButtonEditClient.setEnabled(true);
                        jButtonCancelClient.setEnabled(false);

                        jTableClient.requestFocus(true);
                    }

                    break;

                case KeyEvent.VK_UP:
                    try {
                        String arg = jTableClient.getValueAt(jTableClient.getSelectedRow() - 1, 0).toString();
                        setClient(ClassClient.consultClient(arg));
                        jTableClient.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableClient.getValueAt(jTableClient.getSelectedRow(), 0).toString();
                        setClient(ClassClient.consultClient(arg));
                        jButtonDeleteClient.setEnabled(true);
                        jButtonSaveClient.setEnabled(false);
                        jButtonNewClient.setEnabled(true);
                        jButtonEditClient.setEnabled(true);
                        jButtonCancelClient.setEnabled(false);

                        jTableClient.requestFocus(true);
                    }

                    break;

            }

        }
    }//GEN-LAST:event_jTableClientKeyPressed

    private void jTextAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextAddressActionPerformed
        jTextFieldDistrict.requestFocus(true);
    }//GEN-LAST:event_jTextAddressActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //c√≥digo para sair da JDialog com ESC
        Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {

            @Override
            public void eventDispatched(final AWTEvent event) {
                if (event.getID() == KeyEvent.KEY_PRESSED) {
                    final KeyEvent evt = (KeyEvent) event;

                    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

                        Bean.setBean(null);
                        dispose();
                    }
                }

            }
        }, AWTEvent.KEY_EVENT_MASK);
    }//GEN-LAST:event_formWindowActivated

    private void jTextNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNameActionPerformed
        jTextAddress.requestFocus(true);
    }//GEN-LAST:event_jTextNameActionPerformed

    private void jTextFieldDistrictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDistrictActionPerformed
        jTextFieldCity.requestFocus(true);
    }//GEN-LAST:event_jTextFieldDistrictActionPerformed

    private void jTextFieldCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCityActionPerformed
        jButtonSaveClient.requestFocus(true);
    }//GEN-LAST:event_jTextFieldCityActionPerformed

    private void jFormattedTextFieldCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldCPFActionPerformed

        if (isEditing || isNewRegister) {

            jFormattedTextFieldPhone.requestFocus(true);

        } else {

            setClient(ClassClient.consultClient(jFormattedTextFieldCPF.getText()));

            if (client.getIdtbl_client() == null) {

                JOptionPane.showMessageDialog(this, "Cadastro n√£o encontrado", "Consulta de Cadastro",
                        JOptionPane.INFORMATION_MESSAGE);

                jFormattedTextFieldCPF.setText("");
                jFormattedTextFieldCPF.requestFocus(true);

            } else {

                setClient(client);
                functionFillTableClient();
            }
        }

    }//GEN-LAST:event_jFormattedTextFieldCPFActionPerformed

    private void jFormattedTextFieldPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextFieldPhoneActionPerformed
        jTextName.requestFocus(true);
    }//GEN-LAST:event_jFormattedTextFieldPhoneActionPerformed

    private void jTextFieldIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIdActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if ("0".equals(jTextFieldId.getText()) || "".equals(jTextFieldId.getText())) {

            JOptionPane.showMessageDialog(this, "Voc√™ precisa selecionar"
                    + " um cliente abaixo para prosseguir.", "Aviso", JOptionPane.INFORMATION_MESSAGE);

        } else if (JOptionPane.showConfirmDialog(this, "Deseja vincular esta compra ao cliente:\n*** " + jTextName.getText().toUpperCase() + " *** ?",
                "Registro de Contas de Clientes", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == 0) {

            isRegistredAccount = ClassSale.registerSaleAccountClient(codeCoupon, jFormattedTextFieldCPF.getText(), Sale.getPriceTotal());
            if (isRegistredAccount) {

                JOptionPane.showMessageDialog(this, "A venda no valor de R$ " + v.format(Sale.getPriceTotal())
                        + "\nFoi registrada para o cliente:\n*** " + jTextName.getText().toUpperCase() + " ***", "Mensagem", JOptionPane.INFORMATION_MESSAGE);

                Bean.setBean(null);
                Bean.setNameClient(jTextName.getText().toUpperCase());
                Bean.setCpfClient(jFormattedTextFieldCPF.getText());

                Sale.setIsRegistredAccount(isRegistredAccount);
                this.dispose();

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing


    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogClient dialog = new JDialogClient(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    static javax.swing.JButton jButtonCancelClient;
    static javax.swing.JButton jButtonDeleteClient;
    static javax.swing.JButton jButtonEditClient;
    static javax.swing.JButton jButtonExitClient;
    static javax.swing.JButton jButtonNewClient;
    private static javax.swing.JButton jButtonSaveClient;
    public static javax.swing.JFormattedTextField jFormattedTextFieldCPF;
    public static javax.swing.JFormattedTextField jFormattedTextFieldPhone;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableClient;
    public static javax.swing.JTextField jTextAddress;
    public static javax.swing.JTextField jTextFieldCity;
    public static javax.swing.JTextField jTextFieldDistrict;
    public static javax.swing.JTextField jTextFieldId;
    public static javax.swing.JTextField jTextName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the client
     */
    public Client getClient() {
        return client;
    }

    /**
     * @param aClient the client to set
     */
    public void setClient(Client aClient) {
        Client oldClient = client;
        this.client = aClient;
        firePropertyChange("client", oldClient, aClient);
    }

    public void clearFields() {

        JComponent[] field = fields();

        for (JComponent field1 : field) {
            if (field1 instanceof javax.swing.JTextField) {
                JTextField jTextField = (javax.swing.JTextField) field1;
                jTextField.setText(null);
            }
            if (field1 instanceof javax.swing.JTextArea) {
                JTextArea jTextArea = (javax.swing.JTextArea) field1;
                jTextArea.setText(null);
            }
        }

    }

    public static JComponent[] fields() {

        JComponent[] field = {jTextFieldId, jFormattedTextFieldCPF, jTextName, jFormattedTextFieldPhone, jTextAddress, jTextFieldDistrict, jTextFieldCity};

        return field;
    }

    private static void activeFields(boolean b) {

        JComponent[] field = fields();

        for (int i = 1; i < field.length; i++) {

            field[i].setEnabled(b);
            jButtonSaveClient.setEnabled(b);

        }

    }

    private void formatUpperCase(JTextField jTextField) {
        jTextField.setText(jTextField.getText().toUpperCase());
    }

    private void functionFillTableClient() {

        myModelJtableClient = new MyModelJtableClient();
        jTableClient.setModel(myModelJtableClient);
    }

    private void fnNewClient() {

        isNewRegister = true;
        activeFields(true);
        clearFields();
        jFormattedTextFieldCPF.requestFocus(true);
        jButtonNewClient.setEnabled(false);
        jButtonDeleteClient.setEnabled(false);
        jButtonCancelClient.setEnabled(true);
        jButtonEditClient.setEnabled(false);
    }

    @SuppressWarnings("empty-statement")
    private boolean fnValidClient(String arg) {

        return !arg.contains("_") || !arg.equals("000.000.000/00");
    }
    @SuppressWarnings("empty-statement")
    private boolean fnValidCel(String arg) {

        return arg.contains("_");
    }
    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            Color bg;

            if (!selected) {
                bg = ((row % 2 == 0)
                        ? alternateColor
                        : whiteColor);
            } else {
                bg = selectedColor;
            }

            if (jTableClient.getRowCount() > 0) {

                jTableClient.getColumnModel().getColumn(0).setPreferredWidth(100);
                jTableClient.getColumnModel().getColumn(1).setPreferredWidth(300);// define a largura da coluna

            }

            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);
            setBackground(bg);
            setForeground(selected
                    ? Color.black
                    : new java.awt.Color(102, 102, 102));
            setHorizontalAlignment(SwingConstants.CENTER);

            /*
             *  if (value instanceof ImageIcon) {
             * setIcon((ImageIcon) value);
             * setText("");
             * } else
             * setIcon(null);
             */
            return this;
        }
    }

}

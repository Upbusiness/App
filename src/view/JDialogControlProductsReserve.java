/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.BeanProductTransition;
import action.ReserveIn;
import action.ReserveOut;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassProduct;
import static model.ClassProduct.allCategorys;
import reports.ImprimirRelatorio_2;
import util.DateActual;
import static view.JFrameSale_1.jTextProductCode;
import xml.NewXML;

/**
 *
 * @author CPU
 */
public class JDialogControlProductsReserve extends javax.swing.JDialog {

    static MyModelJtableProductsReserveControl model_table_control_reserve;
    private static String argTable;
    private static String argListControl;
    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    public static String control_view_products;
    public static String order_view_products;
    public static boolean controlRefresh;
    public static boolean isViewFinanceInformation = true;
    public static boolean isViewObservation = false;
    public static boolean controlSelected = false;
    private static final List<Object> argListManager = new ArrayList<>();
    public static boolean isViewListToManager = false;
    private static final List<String> listArg = new ArrayList<>();
    private static String arg3;
    private static String arg;
    private static final List<Object> argListReport = new ArrayList<>();
    private static final NewXML newXML = new NewXML();
    private int statusProduct;
    private static String argCategory = "";
    private static final List<String> listArgCatCod = new ArrayList<>();
    private static String categoryNames = "Todas Categorias";
    private MyModel_3 tabela2;
    private static final ArrayList<String> listFilterCatCod = new ArrayList<>();
    private static int algin = 0;
    private static ArrayList<String> listCategory;
    private static String filterCategory = "";
    private String viewIformation;

    /**
     * Creates new form JDialogControlProductsReserve
     *
     * @param parent
     * @param modal
     */
    public JDialogControlProductsReserve(java.awt.Frame parent, boolean modal) {

        initComponents();
        setIconImage(new ImageIcon("src/icons/controle-estoques1.png").getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jCheckBoxMenuItemViewAllProducts = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemViewProductsDownReserve = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItemViewInformationFinance = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItemViewObservation = new javax.swing.JCheckBoxMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItemOrderCode = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemOrderDescription = new javax.swing.JCheckBoxMenuItem();
        jMenuItemClearFilter = new javax.swing.JMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItemAddToManageList = new javax.swing.JMenuItem();
        jMenuItemViewListToManage = new javax.swing.JMenuItem();
        jMenuItemPrintLisToManager = new javax.swing.JMenuItem();
        jMenuItemClearList = new javax.swing.JMenuItem();
        jMenuItemSelectAll = new javax.swing.JMenuItem();
        jMenuItemPrintReportsProductsSaleActualMonth = new javax.swing.JMenuItem();
        jMenuItemPrintSelected = new javax.swing.JMenuItem();
        jMenuItemPrintAllList = new javax.swing.JMenuItem();
        jMenuItemFilter = new javax.swing.JMenuItem();
        jMenuItemClearFilter1 = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        buttonGroupAlgin = new javax.swing.ButtonGroup();
        jDialogFilterCategory = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCategoryThisProduct = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButtonSaveFilterCategory = new javax.swing.JButton();
        jButtonExitDialogFilterCategory = new javax.swing.JButton();
        jCheckBoxSelecionarTodasCategorias = new javax.swing.JCheckBox();
        jPanelBackground = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonDeleteProduct = new javax.swing.JButton();
        jButtonPrintSelected = new javax.swing.JButton();
        jButtonReserveIn = new javax.swing.JButton();
        jButtonReserveOut = new javax.swing.JButton();
        jButtonSelectAll = new javax.swing.JButton();
        jButtonFilter = new javax.swing.JButton();
        jButtonLockProduct = new javax.swing.JButton();
        jButtonUnLockProduct = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextBarCodeProductReserveControl = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableControlReserveProduct = new javax.swing.JTable();
        jLabelViewStatusFilters = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemBarPrintSelected = new javax.swing.JMenuItem();
        jMenuItemBarPrintMonthSales = new javax.swing.JMenuItem();
        jMenuItemBarSelectAll = new javax.swing.JMenuItem();
        jMenuItemBarExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jRadioButtonMenuItemAlignLeft = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemAlignCenter = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItemAlignRight = new javax.swing.JRadioButtonMenuItem();

        jPopupMenu1.setPreferredSize(new java.awt.Dimension(431, 168));

        buttonGroup1.add(jCheckBoxMenuItemViewAllProducts);
        jCheckBoxMenuItemViewAllProducts.setSelected(true);
        jCheckBoxMenuItemViewAllProducts.setText("Todos Produtos");
        jCheckBoxMenuItemViewAllProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewAllProductsActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemViewAllProducts);

        buttonGroup1.add(jCheckBoxMenuItemViewProductsDownReserve);
        jCheckBoxMenuItemViewProductsDownReserve.setText("Produtos com Estoque Abaixo do Minímo");
        jCheckBoxMenuItemViewProductsDownReserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewProductsDownReserveActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemViewProductsDownReserve);
        jPopupMenu1.add(jSeparator1);

        jCheckBoxMenuItemViewInformationFinance.setSelected(true);
        jCheckBoxMenuItemViewInformationFinance.setText("Mostrar Informações Financeiras");
        jCheckBoxMenuItemViewInformationFinance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewInformationFinanceActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemViewInformationFinance);
        jPopupMenu1.add(jSeparator2);

        jCheckBoxMenuItemViewObservation.setText("Mostrar Observações");
        jCheckBoxMenuItemViewObservation.setEnabled(false);
        jCheckBoxMenuItemViewObservation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemViewObservationActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemViewObservation);
        jPopupMenu1.add(jSeparator3);

        buttonGroup2.add(jCheckBoxMenuItemOrderCode);
        jCheckBoxMenuItemOrderCode.setText("Ordenar por Código");
        jCheckBoxMenuItemOrderCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemOrderCodeActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemOrderCode);

        buttonGroup2.add(jCheckBoxMenuItemOrderDescription);
        jCheckBoxMenuItemOrderDescription.setSelected(true);
        jCheckBoxMenuItemOrderDescription.setText("Ordenar por Descrição");
        jCheckBoxMenuItemOrderDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemOrderDescriptionActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jCheckBoxMenuItemOrderDescription);

        jMenuItemClearFilter.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClearFilter.setText("Limpar Filtro");
        jMenuItemClearFilter.setActionCommand("");
        jMenuItemClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearFilterActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItemClearFilter);

        jMenuItemAddToManageList.setText("Adicionar a Lista de Gerenciamento");
        jMenuItemAddToManageList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAddToManageListActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemAddToManageList);

        jMenuItemViewListToManage.setText("Visualizar Lista");
        jMenuItemViewListToManage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemViewListToManageActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemViewListToManage);

        jMenuItemPrintLisToManager.setText("Imprimir Relatório de Balanço Inicial");
        jMenuItemPrintLisToManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintLisToManagerActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemPrintLisToManager);

        jMenuItemClearList.setText("Limpar Lista");
        jMenuItemClearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearListActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemClearList);

        jMenuItemSelectAll.setText("Selecionar Todos");
        jMenuItemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSelectAllActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemSelectAll);

        jMenuItemPrintReportsProductsSaleActualMonth.setText("Imprimir Relatótio de Vendas do(s) Produto(s) Mês Atual");
        jMenuItemPrintReportsProductsSaleActualMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintReportsProductsSaleActualMonthActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemPrintReportsProductsSaleActualMonth);

        jMenuItemPrintSelected.setText("Imprimir Relatório de Balanço dos Selecionado(s)");
        jMenuItemPrintSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintSelectedActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemPrintSelected);

        jMenuItemPrintAllList.setText("Imprimir Relatório de Balanço de Todos ");
        jMenuItemPrintAllList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintAllListActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemPrintAllList);

        jMenuItemFilter.setText("Filtrar Categoria");
        jMenuItemFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFilterActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemFilter);

        jMenuItemClearFilter1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClearFilter1.setText("Limpar Filtro");
        jMenuItemClearFilter1.setActionCommand("");
        jMenuItemClearFilter1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClearFilter1ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemClearFilter1);

        jMenuItemExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemExit.setText("Sair");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItemExit);

        jDialogFilterCategory.setTitle("Filtragem de produtos a serem exibidos");
        jDialogFilterCategory.setType(java.awt.Window.Type.UTILITY);
        jDialogFilterCategory.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                jDialogFilterCategoryWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jDialogFilterCategoryWindowClosed(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Categorias:"));

        jTableCategoryThisProduct.setAutoCreateRowSorter(true);
        jTableCategoryThisProduct.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTableCategoryThisProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCategoryThisProduct.setRowHeight(18);
        jScrollPane3.setViewportView(jTableCategoryThisProduct);

        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jButtonSaveFilterCategory.setText("Gravar");
        jButtonSaveFilterCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFilterCategoryActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonSaveFilterCategory);

        jButtonExitDialogFilterCategory.setText("Sair");
        jButtonExitDialogFilterCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitDialogFilterCategoryActionPerformed(evt);
            }
        });
        jPanel3.add(jButtonExitDialogFilterCategory);

        jCheckBoxSelecionarTodasCategorias.setText("Selecionar Todas Categorias");
        jCheckBoxSelecionarTodasCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSelecionarTodasCategoriasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialogFilterCategoryLayout = new javax.swing.GroupLayout(jDialogFilterCategory.getContentPane());
        jDialogFilterCategory.getContentPane().setLayout(jDialogFilterCategoryLayout);
        jDialogFilterCategoryLayout.setHorizontalGroup(
            jDialogFilterCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFilterCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialogFilterCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jDialogFilterCategoryLayout.createSequentialGroup()
                        .addComponent(jCheckBoxSelecionarTodasCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 339, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jDialogFilterCategoryLayout.setVerticalGroup(
            jDialogFilterCategoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogFilterCategoryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSelecionarTodasCategorias)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Controle de Estoque");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelBackground.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelBackground.setComponentPopupMenu(jPopupMenu1);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonDeleteProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/product_expiring.png"))); // NOI18N
        jButtonDeleteProduct.setToolTipText("Vencimento de Lotes");
        jButtonDeleteProduct.setFocusable(false);
        jButtonDeleteProduct.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDeleteProduct.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteProductActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonDeleteProduct);

        jButtonPrintSelected.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[010681] - Selection Print.png"))); // NOI18N
        jButtonPrintSelected.setToolTipText("Imprimir Selecionado(s)");
        jButtonPrintSelected.setFocusable(false);
        jButtonPrintSelected.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonPrintSelected.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPrintSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintSelectedActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonPrintSelected);

        jButtonReserveIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/reserve_in.png"))); // NOI18N
        jButtonReserveIn.setToolTipText("Entrada de Produtos");
        jButtonReserveIn.setFocusable(false);
        jButtonReserveIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonReserveIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonReserveIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReserveInActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonReserveIn);

        jButtonReserveOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/reserve_out.png"))); // NOI18N
        jButtonReserveOut.setToolTipText("Saída de Produtos");
        jButtonReserveOut.setFocusable(false);
        jButtonReserveOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonReserveOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonReserveOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReserveOutActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonReserveOut);

        jButtonSelectAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/[010987] - Cópia.png"))); // NOI18N
        jButtonSelectAll.setToolTipText("Selecionar Todos");
        jButtonSelectAll.setFocusable(false);
        jButtonSelectAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSelectAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectAllActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSelectAll);

        jButtonFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/filter28x28.png"))); // NOI18N
        jButtonFilter.setFocusable(false);
        jButtonFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilterActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonFilter);

        jButtonLockProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lock_closed32x32.png"))); // NOI18N
        jButtonLockProduct.setToolTipText("");
        jButtonLockProduct.setFocusable(false);
        jButtonLockProduct.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonLockProduct.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonLockProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLockProductActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonLockProduct);

        jButtonUnLockProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/lock_opened32x32.png"))); // NOI18N
        jButtonUnLockProduct.setToolTipText("");
        jButtonUnLockProduct.setFocusable(false);
        jButtonUnLockProduct.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonUnLockProduct.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonUnLockProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnLockProductActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonUnLockProduct);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/11379_32x32.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
        });
        jToolBar1.add(jLabel1);

        jTextBarCodeProductReserveControl.setBackground(new java.awt.Color(240, 240, 240));
        jTextBarCodeProductReserveControl.setColumns(5);
        jTextBarCodeProductReserveControl.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jTextBarCodeProductReserveControl.setForeground(new java.awt.Color(204, 204, 204));
        jTextBarCodeProductReserveControl.setText("LOCALIZAR PRODUTO POR CÓDIGO DESCRIÇÃO");
        jTextBarCodeProductReserveControl.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jTextBarCodeProductReserveControl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextBarCodeProductReserveControlFocusLost(evt);
            }
        });
        jTextBarCodeProductReserveControl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextBarCodeProductReserveControlMouseClicked(evt);
            }
        });
        jTextBarCodeProductReserveControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextBarCodeProductReserveControlActionPerformed(evt);
            }
        });
        jTextBarCodeProductReserveControl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextBarCodeProductReserveControlKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextBarCodeProductReserveControlKeyReleased(evt);
            }
        });
        jToolBar1.add(jTextBarCodeProductReserveControl);

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseReleased(evt);
            }
        });

        jTableControlReserveProduct.setRowHeight(25);
        jTableControlReserveProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableControlReserveProductMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableControlReserveProductMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableControlReserveProduct);
        jTableControlReserveProduct.setDefaultRenderer(Object.class, new MyCellRenderer());

        jLabelViewStatusFilters.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabelViewStatusFilters.setForeground(new java.awt.Color(0, 0, 204));
        jLabelViewStatusFilters.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelViewStatusFilters.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/b_down.png"))); // NOI18N
        jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Informações Financeiras              ");
        jLabelViewStatusFilters.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabelViewStatusFilters.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jLabelViewStatusFilters.setIconTextGap(70);
        jLabelViewStatusFilters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelViewStatusFiltersMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelBackgroundLayout = new javax.swing.GroupLayout(jPanelBackground);
        jPanelBackground.setLayout(jPanelBackgroundLayout);
        jPanelBackgroundLayout.setHorizontalGroup(
            jPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBackgroundLayout.createSequentialGroup()
                .addGroup(jPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBackgroundLayout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 807, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelViewStatusFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelBackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        jPanelBackgroundLayout.setVerticalGroup(
            jPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBackgroundLayout.createSequentialGroup()
                .addGroup(jPanelBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBackgroundLayout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabelViewStatusFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jMenu1.setText("Arquivo");

        jMenuItemBarPrintSelected.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemBarPrintSelected.setText("Imprimir Selecionados");
        jMenuItemBarPrintSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBarPrintSelectedActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBarPrintSelected);

        jMenuItemBarPrintMonthSales.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemBarPrintMonthSales.setText("Imprimir Vendas Mensais");
        jMenuItemBarPrintMonthSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBarPrintMonthSalesActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBarPrintMonthSales);

        jMenuItemBarSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemBarSelectAll.setText("Selecionar Todos");
        jMenuItemBarSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBarSelectAllActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBarSelectAll);

        jMenuItemBarExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemBarExit.setText("Sair");
        jMenuItemBarExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemBarExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemBarExit);

        jMenuBar1.add(jMenu1);

        jMenuEdit.setText("Editar");

        buttonGroupAlgin.add(jRadioButtonMenuItemAlignLeft);
        jRadioButtonMenuItemAlignLeft.setText("Alinhar à Esquerda");
        jRadioButtonMenuItemAlignLeft.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMenuItemAlignLeftItemStateChanged(evt);
            }
        });
        jMenuEdit.add(jRadioButtonMenuItemAlignLeft);

        buttonGroupAlgin.add(jRadioButtonMenuItemAlignCenter);
        jRadioButtonMenuItemAlignCenter.setSelected(true);
        jRadioButtonMenuItemAlignCenter.setText("Alinhar  Justificado");
        jRadioButtonMenuItemAlignCenter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMenuItemAlignCenterItemStateChanged(evt);
            }
        });
        jMenuEdit.add(jRadioButtonMenuItemAlignCenter);

        buttonGroupAlgin.add(jRadioButtonMenuItemAlignRight);
        jRadioButtonMenuItemAlignRight.setText("Alinhar à Direita");
        jRadioButtonMenuItemAlignRight.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMenuItemAlignRightItemStateChanged(evt);
            }
        });
        jMenuEdit.add(jRadioButtonMenuItemAlignRight);

        jMenuBar1.add(jMenuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(null);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectAllActionPerformed
        fnSelectAll();
    }//GEN-LAST:event_jButtonSelectAllActionPerformed

    private void jTextBarCodeProductReserveControlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextBarCodeProductReserveControlMouseClicked
        jTextBarCodeProductReserveControl.setText("");
    }//GEN-LAST:event_jTextBarCodeProductReserveControlMouseClicked

    private void jTextBarCodeProductReserveControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextBarCodeProductReserveControlActionPerformed
        fnSearchProduct();
    }//GEN-LAST:event_jTextBarCodeProductReserveControlActionPerformed

    private void jTextBarCodeProductReserveControlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextBarCodeProductReserveControlFocusLost
        if (jTextBarCodeProductReserveControl.getText().isEmpty()) {
            jTextBarCodeProductReserveControl.setText("LOCALIZAR PRODUTO POR CÓDIGO DESCRIÇÃO");
            jTextBarCodeProductReserveControl.setForeground(new java.awt.Color(204, 204, 204));
        }
    }//GEN-LAST:event_jTextBarCodeProductReserveControlFocusLost

    private void jTextBarCodeProductReserveControlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextBarCodeProductReserveControlKeyReleased
        if (jTextBarCodeProductReserveControl.getForeground().equals(new java.awt.Color(204, 204, 204))) {
            jTextBarCodeProductReserveControl.setForeground(new java.awt.Color(51, 51, 51));
        }
        if (jTextBarCodeProductReserveControl.getText().contains("LOCALIZAR PRODUTO POR CÓDIGO DESCRIÇÃO")) {
            if (jTextBarCodeProductReserveControl.getText().substring(0, jTextBarCodeProductReserveControl.getText().length() - 1).equals("LOCALIZAR PRODUTO POR CÓDIGO DESCRIÇÃO")) {
                jTextBarCodeProductReserveControl.setText(jTextBarCodeProductReserveControl.getText().substring(jTextBarCodeProductReserveControl.getText().length() - 1));
            }
        }
        if (jTextBarCodeProductReserveControl.getText().isEmpty()) {
            jTextBarCodeProductReserveControl.setText("LOCALIZAR PRODUTO POR CÓDIGO DESCRIÇÃO");
            jTextBarCodeProductReserveControl.setForeground(new java.awt.Color(204, 204, 204));
        }
    }//GEN-LAST:event_jTextBarCodeProductReserveControlKeyReleased

    private void jTableControlReserveProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableControlReserveProductMouseClicked

        if (jTableControlReserveProduct.getRowCount() > 0) {

            if (evt.getClickCount() == 2) {
               
                BeanProductTransition.setCode(jTableControlReserveProduct.getValueAt(jTableControlReserveProduct.getSelectedRow(), 2).toString());
                new JDialogInventory(null, true).setVisible(true);

            }
        }
    }//GEN-LAST:event_jTableControlReserveProductMouseClicked

    private void jLabelViewStatusFiltersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelViewStatusFiltersMouseClicked
        jPopupMenu1.show(this, jLabelViewStatusFilters.getX() + 18, jLabelViewStatusFilters.getY() + 96);
    }//GEN-LAST:event_jLabelViewStatusFiltersMouseClicked

    private void jCheckBoxMenuItemViewAllProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewAllProductsActionPerformed
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR ON LIST MANEGER VIEW::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR ON LIST MANEGER VIEW::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
        this.fnViewProduct();
    }//GEN-LAST:event_jCheckBoxMenuItemViewAllProductsActionPerformed

    private void jCheckBoxMenuItemViewProductsDownReserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewProductsDownReserveActionPerformed
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
        if (jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Informações Financeiras              ");
        } else if (jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Informações Financeiras    ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Sem Informações Financeiras          ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Sem Informações Financeiras");
        }
    }//GEN-LAST:event_jCheckBoxMenuItemViewProductsDownReserveActionPerformed

    private void jCheckBoxMenuItemOrderCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemOrderCodeActionPerformed
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
    }//GEN-LAST:event_jCheckBoxMenuItemOrderCodeActionPerformed

    private void jCheckBoxMenuItemOrderDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemOrderDescriptionActionPerformed
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
    }//GEN-LAST:event_jCheckBoxMenuItemOrderDescriptionActionPerformed

    private void jCheckBoxMenuItemViewInformationFinanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewInformationFinanceActionPerformed
        isViewFinanceInformation = jCheckBoxMenuItemViewInformationFinance.isSelected();
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
        if (jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Informações Financeiras              ");
        } else if (jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Informações Financeiras    ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Sem Informações Financeiras          ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Sem Informações Financeiras");
        }
        viewIformation = jLabelViewStatusFilters.getText();
        if (jCheckBoxMenuItemViewObservation.isSelected()) {
            jCheckBoxMenuItemViewObservation.setSelected(false);

        }
        jCheckBoxMenuItemViewObservation.setEnabled(!jCheckBoxMenuItemViewInformationFinance.isSelected());
        isViewObservation = false;
    }//GEN-LAST:event_jCheckBoxMenuItemViewInformationFinanceActionPerformed

    private void jCheckBoxMenuItemViewObservationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemViewObservationActionPerformed
        isViewObservation = jCheckBoxMenuItemViewObservation.isSelected();
        isViewFinanceInformation = false;
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR VIEW LIST::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR COMPLETE TABLE::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }
    }//GEN-LAST:event_jCheckBoxMenuItemViewObservationActionPerformed

    private void jButtonReserveInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReserveInActionPerformed
        fnLaunchIN();
    }//GEN-LAST:event_jButtonReserveInActionPerformed

    private void jTableControlReserveProductMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableControlReserveProductMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTableControlReserveProductMouseReleased

    private void jMenuItemAddToManageListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddToManageListActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionAddToListManeger", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR ADD TO LIST MANEGER::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jMenuItemAddToManageListActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemViewListToManageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemViewListToManageActionPerformed
        controlSelected = false;
        if (argListManager.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Não existe nenhum produto adicionado a lista.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR VIEW LIST MANEGER::" + ex);
                //newXML.generateLog(ex.toString());
            }
            isViewListToManager = true;
            System.err.println(argListManager);
        }
    }//GEN-LAST:event_jMenuItemViewListToManageActionPerformed

    private void jMenuItemClearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearListActionPerformed
        argListManager.clear();
        if (argListManager.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Lista apagada com sucesso.", "Menssagem", JOptionPane.INFORMATION_MESSAGE);
            isViewListToManager = false;
            System.out.println("List clear successfully");
        }
        fnClearTbl();
    }//GEN-LAST:event_jMenuItemClearListActionPerformed

    private void jMenuItemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSelectAllActionPerformed
        fnSelectAll();
    }//GEN-LAST:event_jMenuItemSelectAllActionPerformed

    private void jButtonPrintSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintSelectedActionPerformed
        fnPrintSelected();
    }//GEN-LAST:event_jButtonPrintSelectedActionPerformed

    private void jScrollPane1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane1MouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
   
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItemPrintReportsProductsSaleActualMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintReportsProductsSaleActualMonthActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionPrintReportsProductsSaleActualMonthAction", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR PRINT REPORT LINE 1005::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jMenuItemPrintReportsProductsSaleActualMonthActionPerformed

    private void jTextBarCodeProductReserveControlKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextBarCodeProductReserveControlKeyPressed
        if (jTextBarCodeProductReserveControl.getText().contains("POR CÓDIGO")) {
            jTextBarCodeProductReserveControl.setText("");
        }
    }//GEN-LAST:event_jTextBarCodeProductReserveControlKeyPressed

    private void jButtonDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteProductActionPerformed
        new JDialogControlProductExpiring(null, true).setVisible(true);

    }//GEN-LAST:event_jButtonDeleteProductActionPerformed

    private void jMenuItemPrintAllListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintAllListActionPerformed
        try {
            Method something
                    = this.getClass().getDeclaredMethod("functionPrintAll", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            System.err.println("ERROR PRINT ALL LINE 1028::" + ex);
            //newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_jMenuItemPrintAllListActionPerformed

    private void jMenuItemPrintSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintSelectedActionPerformed
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 1));
            }

        }

        if (listArg.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionPrintSelected", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR PRINTB SELECTED  LINE 1049::" + ex);
                //newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemPrintSelectedActionPerformed

    private void jButtonReserveOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReserveOutActionPerformed
        fnLaunchOUT();
    }//GEN-LAST:event_jButtonReserveOutActionPerformed

    private void jMenuItemBarPrintSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBarPrintSelectedActionPerformed
        fnPrintSelected();
    }//GEN-LAST:event_jMenuItemBarPrintSelectedActionPerformed

    private void jMenuItemBarSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBarSelectAllActionPerformed
        fnSelectAll();
    }//GEN-LAST:event_jMenuItemBarSelectAllActionPerformed

    private void jMenuItemBarPrintMonthSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBarPrintMonthSalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemBarPrintMonthSalesActionPerformed

    private void jMenuItemBarExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemBarExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemBarExitActionPerformed

    private void jMenuItemPrintLisToManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintLisToManagerActionPerformed
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 1));
            }

        }

        if (listArg.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionPrintListControl", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR PRINT LIST CONTROL LINE 1094::" + ex);
                //newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItemPrintLisToManagerActionPerformed

    private void jMenuItemFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFilterActionPerformed
        fnFilterCategory();
    }//GEN-LAST:event_jMenuItemFilterActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        listCategory = (ArrayList<String>) allCategorys();
        viewIformation = jLabelViewStatusFilters.getText();

    }//GEN-LAST:event_formWindowOpened

    private void jRadioButtonMenuItemAlignLeftItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAlignLeftItemStateChanged

        algin = -1;
        try {
            Method something
                    = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            //newXML.generateLog(ex.toString());
            System.err.println("ERROR COMPLETE TABLE LINE 1120::" + ex);

        }

    }//GEN-LAST:event_jRadioButtonMenuItemAlignLeftItemStateChanged

    private void jRadioButtonMenuItemAlignCenterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAlignCenterItemStateChanged

        algin = 0;
        try {
            Method something
                    = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            //newXML.generateLog(ex.toString());
            System.err.println("ERROR COMPLETE TABLE LINE 1136::" + ex);

        }

    }//GEN-LAST:event_jRadioButtonMenuItemAlignCenterItemStateChanged

    private void jRadioButtonMenuItemAlignRightItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAlignRightItemStateChanged

        algin = 1;
        try {
            Method something
                    = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            //newXML.generateLog(ex.toString());
            System.err.println("ERROR COMPLETE TABLE LINE 1152::" + ex);

        }

    }//GEN-LAST:event_jRadioButtonMenuItemAlignRightItemStateChanged

    private void jButtonFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilterActionPerformed

        fnFilterCategory();

    }//GEN-LAST:event_jButtonFilterActionPerformed

    private void jButtonSaveFilterCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFilterCategoryActionPerformed

        for (int i = 0; i < jTableCategoryThisProduct.getRowCount(); i++) {

            if (jTableCategoryThisProduct.getValueAt(i, 0).equals(true)) {
                listArgCatCod.add((String) jTableCategoryThisProduct.getValueAt(i, 1));
                if (argCategory.equals("")) {
                    argCategory += jTableCategoryThisProduct.getValueAt(i, 1);
                    categoryNames += jTableCategoryThisProduct.getValueAt(i, 2);
                } else {
                    argCategory += "," + jTableCategoryThisProduct.getValueAt(i, 1);
                    categoryNames += "," + jTableCategoryThisProduct.getValueAt(i, 2);
                }
            }
        }
        if ((jCheckBoxSelecionarTodasCategorias.isSelected())) {
            categoryNames = "Todas Categorias";
        }
        if (listArgCatCod.size() == jTableCategoryThisProduct.getModel().getRowCount()) {
            categoryNames = "Todas Categorias";
        }
        jDialogFilterCategory.dispose();
    }//GEN-LAST:event_jButtonSaveFilterCategoryActionPerformed

    private void jButtonExitDialogFilterCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitDialogFilterCategoryActionPerformed

        jDialogFilterCategory.dispose();
    }//GEN-LAST:event_jButtonExitDialogFilterCategoryActionPerformed

    private void jCheckBoxSelecionarTodasCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSelecionarTodasCategoriasActionPerformed
        try {
            tabela2 = new MyModel_3(jCheckBoxSelecionarTodasCategorias.isSelected(), listArgCatCod);
            jTableCategoryThisProduct.setModel(tabela2);
        } catch (Exception ex) {
            ////newXML.generateLog(ex.toString());
            System.err.println("ERROR SELECT ALL CATEGORYS LINE 1225::" + ex);

        }
    }//GEN-LAST:event_jCheckBoxSelecionarTodasCategoriasActionPerformed

    private void jDialogFilterCategoryWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogFilterCategoryWindowActivated
        try {

            System.err.println("ARG ON OPEN FILTER:::::::" + listArgCatCod);
            tabela2 = new MyModel_3(false, listArgCatCod);
            jTableCategoryThisProduct.setModel(tabela2);

        } catch (Exception ex) {
            ////newXML.generateLog(ex.toString());
            System.err.println("ERROR OPEN FILTER LINE 1239::" + ex);
        }
    }//GEN-LAST:event_jDialogFilterCategoryWindowActivated

    private void jDialogFilterCategoryWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogFilterCategoryWindowClosed


    }//GEN-LAST:event_jDialogFilterCategoryWindowClosed

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        jTextBarCodeProductReserveControl.requestFocus(true);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jMenuItemClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearFilterActionPerformed
        listArgCatCod.clear();
        filterCategory = "";
        jLabelViewStatusFilters.setText(viewIformation);
    }//GEN-LAST:event_jMenuItemClearFilterActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButtonLockProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLockProductActionPerformed

        if (JOptionPane.showConfirmDialog(this, "Deseja realmente bloquear este produto?\n Esta ação não permitira sua venda.", "Alerta!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0) {
            statusProduct = 0;
            fnBlockProduct();
        }
    }//GEN-LAST:event_jButtonLockProductActionPerformed

    private void jButtonUnLockProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnLockProductActionPerformed

        statusProduct = 1;
        fnBlockProduct();

    }//GEN-LAST:event_jButtonUnLockProductActionPerformed

    private void jMenuItemClearFilter1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClearFilter1ActionPerformed
        listArgCatCod.clear();
        filterCategory = "";
        jLabelViewStatusFilters.setText(viewIformation);
    }//GEN-LAST:event_jMenuItemClearFilter1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogControlProductsReserve.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogControlProductsReserve dialog = new JDialogControlProductsReserve(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroupAlgin;
    private javax.swing.JButton jButtonDeleteProduct;
    private javax.swing.JButton jButtonExitDialogFilterCategory;
    private javax.swing.JButton jButtonFilter;
    private javax.swing.JButton jButtonLockProduct;
    private javax.swing.JButton jButtonPrintSelected;
    private javax.swing.JButton jButtonReserveIn;
    private javax.swing.JButton jButtonReserveOut;
    private javax.swing.JButton jButtonSaveFilterCategory;
    private javax.swing.JButton jButtonSelectAll;
    private javax.swing.JButton jButtonUnLockProduct;
    public static javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemOrderCode;
    public static javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemOrderDescription;
    public static javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewAllProducts;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewInformationFinance;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewObservation;
    public static javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemViewProductsDownReserve;
    private javax.swing.JCheckBox jCheckBoxSelecionarTodasCategorias;
    private javax.swing.JDialog jDialogFilterCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelViewStatusFilters;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenuItem jMenuItemAddToManageList;
    private javax.swing.JMenuItem jMenuItemBarExit;
    private javax.swing.JMenuItem jMenuItemBarPrintMonthSales;
    private javax.swing.JMenuItem jMenuItemBarPrintSelected;
    private javax.swing.JMenuItem jMenuItemBarSelectAll;
    private javax.swing.JMenuItem jMenuItemClearFilter;
    private javax.swing.JMenuItem jMenuItemClearFilter1;
    private javax.swing.JMenuItem jMenuItemClearList;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemFilter;
    private javax.swing.JMenuItem jMenuItemPrintAllList;
    private javax.swing.JMenuItem jMenuItemPrintLisToManager;
    private javax.swing.JMenuItem jMenuItemPrintReportsProductsSaleActualMonth;
    private javax.swing.JMenuItem jMenuItemPrintSelected;
    private javax.swing.JMenuItem jMenuItemSelectAll;
    private javax.swing.JMenuItem jMenuItemViewListToManage;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelBackground;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemAlignCenter;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemAlignLeft;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItemAlignRight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTable jTableCategoryThisProduct;
    public static javax.swing.JTable jTableControlReserveProduct;
    public static javax.swing.JTextField jTextBarCodeProductReserveControl;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);
            try {

                if (table.getRowCount() > 0) {

                    Color bg;
                    Font ft;

                    if (!selected && table.getModel().getValueAt(row, 0).equals(false)) {

                        bg = ((row % 2 == 0) ? alternateColor : whiteColor);
                        setForeground(new java.awt.Color(102, 102, 102));

                    } else {
                        table.getModel().setValueAt(true, row, 0);
                        bg = selectedColor;
                        setForeground(Color.black);

                    }
                    //column == 10 || column == 11 || column == 8 ||
                    ft = ((column == 1 || (table.getColumnModel().getColumn(column).getHeaderValue().equals("Abaixo min.")))
                            ? new java.awt.Font("Tahoma", 3, 12)
                            : new java.awt.Font("Tahoma", 0, 12));

                    ImageIcon ico = ((table.getValueAt(row, 1).equals("NÃO")) ? (new javax.swing.ImageIcon(getClass().getResource("/icons/unlock_small.png"))) : (new javax.swing.ImageIcon(getClass().getResource("/icons/lock_small.png"))));

                    //jTableItens.setShowHorizontalLines(false);
                    //jTableItens.setShowVerticalLines(false);
                    setBackground(bg);
                    setFont(ft);
                    setIcon((column == 1) ? ico : null);

                    setForeground(selected
                            ? Color.black
                            : new java.awt.Color(102, 102, 102));
                    setForeground((table.getValueAt(row, table.getColumnModel().getColumnIndex("Abaixo min.")).equals("NÃO") && column == table.getColumnModel().getColumnIndex("Abaixo min.")) ? (new java.awt.Color(0, 102, 0)) : (table.getValueAt(row, table.getColumnModel().getColumnIndex("Abaixo min.")).equals("SIM") && column == table.getColumnModel().getColumnIndex("Abaixo min.")) ? (new java.awt.Color(153, 0, 0)) : (table.getValueAt(row, table.getColumnModel().getColumnIndex("Bloqueado")).equals("NÃO") && column == table.getColumnModel().getColumnIndex("Bloqueado")) ? (new java.awt.Color(0, 102, 0)) : (table.getValueAt(row, table.getColumnModel().getColumnIndex("Bloqueado")).equals("SIM") && column == table.getColumnModel().getColumnIndex("Bloqueado")) ? (new java.awt.Color(153, 0, 0)) : (new java.awt.Color(102, 102, 102)));

                    switch (algin) {

                        case -1:
                            setHorizontalAlignment(SwingConstants.LEFT);
                            break;
                        case 0:
                            setHorizontalAlignment(SwingConstants.CENTER);
                            break;
                        case 1:
                            setHorizontalAlignment(SwingConstants.RIGHT);
                            break;

                    }

                    table.getColumnModel().getColumn(0).setPreferredWidth(5);
                    table.getColumnModel().getColumn(2).setPreferredWidth(120);// define a largura da coluna
                    table.getColumnModel().getColumn(3).setPreferredWidth(250);
                    table.getColumnModel().getColumn(4).setPreferredWidth(100);

                    /*
                     *  if (value instanceof ImageIcon) {
                     * setIcon((ImageIcon) value);
                     * setText("");
                     * } else
                     * setIcon(null);
                     */
                }

            } catch (java.lang.IllegalArgumentException ex) {

                System.err.println("ERROR CELLRENDER::" + ex);
                ////newXML.generateLog(ex.toString());
            } catch (java.lang.ArrayIndexOutOfBoundsException ex) {

                System.err.println("ERROR CELLRENDER::" + ex);
                ////newXML.generateLog(ex.toString());
            } catch (Exception ex) {
                System.err.println("ERROR CELLRENDER::" + ex);
                ////newXML.generateLog(ex.toString());
            }
            return this;
        }

    }

    public static void viewListToManager() {

        if (!jTextBarCodeProductReserveControl.getText().isEmpty()) {

            if (jCheckBoxMenuItemViewAllProducts.isSelected()) {
                control_view_products = "";

            } else {
                control_view_products = "  p.`prod_reserve_actual_product` <= p.`prod_reserve_minimum_product` AND ";

            }
            if (jCheckBoxMenuItemOrderCode.isSelected()) {
                order_view_products = "ORDER BY prod_bar_code_product;";
            } else {
                order_view_products = "ORDER BY prod_description_product;";
            }
            String str = argListManager.toString().replace("[", "(").replace("]", ")");
            argListControl = "WHERE " + control_view_products + " prod_bar_code_product  IN " + str + order_view_products;
            try {

                model_table_control_reserve = new MyModelJtableProductsReserveControl(controlSelected, isViewFinanceInformation, isViewObservation, argListControl);
                jTableControlReserveProduct.setModel(model_table_control_reserve);
                jTableControlReserveProduct.requestFocus(true);

            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }

        }

    }

    public static void completeTable() {

        if (!jTextBarCodeProductReserveControl.getText().isEmpty()) {

            if (jCheckBoxMenuItemViewAllProducts.isSelected()) {
                control_view_products = "";

            } else {
                control_view_products = "  p.`prod_reserve_actual_product` <= p.`prod_reserve_minimum_product` AND ";

            }
            if (jCheckBoxMenuItemOrderCode.isSelected()) {
                order_view_products = "ORDER BY p.`prod_bar_code_product`;";
            } else {
                order_view_products = "ORDER BY p.`prod_description_product`;";
            }
            if (listCategory.contains(jTextBarCodeProductReserveControl.getText())) {

                argTable = "WHERE " + filterCategory + "( LEFT(p.`prod_bar_code_product`,1) != 'p' AND " + control_view_products + " p.`prod_category_product` = 0 )" + order_view_products;

            } else {

                if (jTextBarCodeProductReserveControl.getText().equalsIgnoreCase("ALL")) {
                    argTable = "WHERE " + filterCategory + "( LEFT(p.`prod_bar_code_product`,1) != 'p' AND " + control_view_products + " p.`prod_isActive` = 0 )" + order_view_products;
                } else {
                    argTable = "WHERE " + filterCategory + "( LEFT(p.`prod_bar_code_product`,1) != 'p' AND " + control_view_products + " p.`prod_description_product`  LIKE '%" + jTextBarCodeProductReserveControl.getText() + "%' OR p.`prod_bar_code_product`  LIKE '%" + jTextBarCodeProductReserveControl.getText() + "%' )" + order_view_products + ";";
                }

            }
            try {

                if (isViewListToManager) {
                    argTable = argListControl;
                }
                System.err.println("$$$$$$$>>>>ARG TABLE:::::" + argTable);
                model_table_control_reserve = new MyModelJtableProductsReserveControl(controlSelected, isViewFinanceInformation, isViewObservation, argTable);
                jTableControlReserveProduct.setModel(model_table_control_reserve);
                jTableControlReserveProduct.requestFocus(true);

            } catch (Exception ex) {
                System.err.println("ERRO MODEL TABLE AVANCED SEARCH::" + ex);
                System.err.println("ERROR ON COMPLETE TABLE::" + ex);
                ////newXML.generateLog(ex.toString());
            }

        }

    }

    public void functionPrintSelected() {

        isViewListToManager = false;
        arg3 = listArg.toString().replace("[", "(").replace("]", ")");

        Object[] arg1 = {" p.`prod_bar_code_product` IN" + arg3 + " ORDER BY  p.`prod_description_product`;"};
        Object[] arg2 = {"PAR_ARG"};
        System.err.println(arg1[0]);
        new ImprimirRelatorio_2().visualizarRelatorio(arg1, arg2, "reportProductListReserveControl.jasper", true);
        controlSelected = false;
        listArg.clear();

    }

    public void functionPrintListControl() {

        isViewListToManager = false;
        arg3 = listArg.toString().replace("[", "(").replace("]", ")");

        Object[] arg1 = {" p.`prod_bar_code_product` IN" + arg3 + " ORDER BY  p.`prod_description_product`;"};
        Object[] arg2 = {"PAR_ARG"};
        new ImprimirRelatorio_2().visualizarRelatorio(arg1, arg2, "reportInventoriProducts.jasper", true);
        controlSelected = false;
        listArg.clear();

    }

    public void functionPrintAll() {

        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            listArg.add((String) jTableControlReserveProduct.getValueAt(i, 1));

        }

        if (jTableControlReserveProduct.getRowCount() > 0) {

            arg3 = listArg.toString().replace("[", "(").replace("]", ")");

            Object[] arg1 = {" p.`prod_bar_code_product` IN" + arg3 + " ORDER BY  p.`prod_description_product`;"};
            Object[] arg2 = {"PAR_ARG"};
            new ImprimirRelatorio_2().visualizarRelatorio(arg1, arg2, "reportProductListReserveControl.jasper", true);

            listArg.clear();

        } else {

            JOptionPane.showMessageDialog(null, "Não ha item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public void functionPrintReportsProductsSaleActualMonthAction() {
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 1));
            }

        }
        if (listArg.size() > 0) {

            arg3 = listArg.toString().replace("[", "(").replace("]", ")");

            Object[] arg1 = {" p.`prod_bar_code_product` IN" + arg3 + " GROUP BY p.`prod_bar_code_product` ORDER BY  p.`prod_description_product`;", DateActual.setDate(new Date(), "MM/yyyy")};
            Object[] arg2 = {"PAR_ARG", "PAR_DATE"};
            new ImprimirRelatorio_2().visualizarRelatorio(arg1, arg2, "reportSalesMonthProduct.jasper", true);

            listArg.clear();

        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    public void functionAddToListManeger() {
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {
            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                if (!argListManager.contains(jTableControlReserveProduct.getValueAt(i, 1))) {
                    argListManager.add((jTableControlReserveProduct.getValueAt(i, 1)));
                }

            }
        }
        if (argListManager.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void functionAddToReport() {

        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {
            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                if (!argListReport.contains(jTableControlReserveProduct.getValueAt(i, 1))) {
                    argListReport.add((jTableControlReserveProduct.getValueAt(i, 1)));
                }

            }
        }
        if (argListReport.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        }

    }

    public void functionPrintReport() {

        arg3 = argListReport.toString().replace("[", "(").replace("]", ")");

        Object[] arg1 = {" p.`prod_bar_code_product` IN" + arg3 + " ORDER BY  p.`prod_description_product`;"};
        Object[] arg2 = {"PAR_ARG"};
        new ImprimirRelatorio_2().visualizarRelatorio(arg1, arg2, "reportListControlReserve.jasper", true);

        listArg.clear();

    }

    private void fnBlockProduct() {

        listArg.clear();
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 2));
            }

        }

        if (listArg.size() > 0) {

            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionBlockSelected", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  

            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR ON JDIALOG::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Bloqueio de Item", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void fnPrintSelected() {

        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 2));
            }

        }

        if (listArg.size() > 0) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("functionPrintSelected", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Impressão", JOptionPane.INFORMATION_MESSAGE);
        }

    }

    private void fnSelectAll() {
        System.err.println("CONTROL SELECTED :::::" + controlSelected);
        controlSelected = !controlSelected;
        System.err.println("CONTROL SELECTED AFTER:::::" + controlSelected);
        if (isViewListToManager) {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("viewListToManager", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }

        } else {
            try {
                Method something
                        = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

                ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
            } catch (NoSuchMethodException | SecurityException ex) {
                System.err.println("ERROR::" + ex);
                //newXML.generateLog(ex.toString());
            }
        }

    }

    private void fnLaunchIN() {

        arg = null;
        int count = 0;
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {
            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                arg = ((String) jTableControlReserveProduct.getValueAt(i, 2));
                count++;
            }
        }
        if (count > 1) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (count == 0) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            ReserveIn.setBean(arg);
            new JDialogReserveIn(null, true).setVisible(true);
        }
    }

    private void fnLaunchOUT() {

        arg = null;
        int count = 0;
        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {
            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                arg = ((String) jTableControlReserveProduct.getValueAt(i, 2));
                count++;
            }
        }
        if (count > 1) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        } else if (count == 0) {
            JOptionPane.showMessageDialog(this, "Selecione um produto na lista.", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            ReserveOut.setBean(arg);
            new JDialogReserveOut(null, true).setVisible(true);
        }
    }

    private void setActiveDesactiveProduct(boolean status) {

        for (int i = 0; i < jTableControlReserveProduct.getRowCount(); i++) {

            if (jTableControlReserveProduct.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableControlReserveProduct.getValueAt(i, 1));
            }

        }
    }

    private void fnClearTbl() {

        jTableControlReserveProduct.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{}
        ));
    }

    private void fnViewProduct() {

        if (jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Informações Financeiras              ");
        } else if (jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Informações Financeiras    ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Todos Produtos | Sem Informações Financeiras          ");
        } else if (!jCheckBoxMenuItemViewInformationFinance.isSelected() && !jCheckBoxMenuItemViewAllProducts.isSelected()) {
            jLabelViewStatusFilters.setText("  Exibir:Estoque abaixo do minimo | Sem Informações Financeiras");
        }
    }

    private void fnSearchProduct() {

        isViewListToManager = false;
        controlSelected = false;
        try {
            Method something
                    = this.getClass().getDeclaredMethod("completeTable", new Class[0]);

            ClassLoadingMethods.loading(something, this); // Aqui enviamos o metodo doIt !  
        } catch (NoSuchMethodException | SecurityException ex) {
            //newXML.generateLog(ex.toString());
            System.err.println("ERROR SEARCH PRODUCT::" + ex);

        }

    }

    public void functionBlockSelected() {

        ClassProduct.blockProduct(listArg.toString().replace("[", "").replace("]", ""), statusProduct);
        listArg.clear();
        fnSearchProduct();

    }

    private void fnFilterCategory() {

        argCategory = "";
        categoryNames = "";
        Dimension tamanhoDialogMain = getSize();
        Dimension tamanhoDialog1 = jDialogFilterCategory.getPreferredSize();
        Point loc = getLocation();
        jDialogFilterCategory.setLocation(
                (tamanhoDialogMain.width - tamanhoDialog1.width) / 2 + loc.x,
                (tamanhoDialogMain.height - tamanhoDialog1.height) / 2 + loc.y);
        jDialogFilterCategory.setModal(true);
        jDialogFilterCategory.pack();
        jDialogFilterCategory.setVisible(true);

        if (!listArgCatCod.isEmpty()) {

            filterCategory = listArgCatCod.toString().replace("[", "(").replace("]", ")");
            filterCategory = "(p.`idtbl_category_product` IN" + filterCategory + ") AND ";
            System.err.println("Filtro Category:::" + filterCategory);
            jLabelViewStatusFilters.setText(" Filtrado por categoria | Informações Financeiras              ");

        } else {

            filterCategory = "";
            fnViewProduct();

        }

        System.err.println("ARG::::::" + listArgCatCod);

    }

}

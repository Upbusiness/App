/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.BeanConfig;
import action.Sale;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassCashier;
import model.ClassSale;
import testes.PrintCoupon;
import util.DateActual;
import static view.JFrameSale_1.*;//codeCoupon;
import xml.NewXML;

/**
 *
 * @author Java
 */
public class JDialogOptionsCancelCouponIten extends javax.swing.JDialog {

    private static final DecimalFormat v = new DecimalFormat("0.00");
    public static boolean isPrintLineCanceled = false;
    private static double valueLastProductCancelTable;
    private int numberItenCaceled;
    public DefaultListModel listModel = new DefaultListModel();
    private MyModelJtableCoupon tableModelCoupon;
    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    private static final String term = jLabelTerminalNumber.getText();
    private static boolean isCanceled = false;
    private static boolean isClosedCashier;
    private static final NewXML newXML = new NewXML();

    /**
     * Creates new form JDialogOptionsCancelCouponIten
     *
     * @param parent
     * @param modal
     */
    public JDialogOptionsCancelCouponIten(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogCouponList = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCoupons = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemCancelCouponSelected1 = new javax.swing.JMenuItem();
        jMenuItemPrintSelectedCoupon1 = new javax.swing.JMenuItem();
        jMenuItemExitDetailedReportCashier1 = new javax.swing.JMenuItem();
        jPopupMenuCouponsTerminal = new javax.swing.JPopupMenu();
        jMenuItemCancelCouponSelected = new javax.swing.JMenuItem();
        jMenuItemPrintSelectedCoupon = new javax.swing.JMenuItem();
        jMenuItemExitDetailedReportCashier = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList(listModel);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCancelLastIten = new javax.swing.JMenuItem();
        jMenuItemCancelIten = new javax.swing.JMenuItem();
        jMenuItemCancelCoupon = new javax.swing.JMenuItem();
        jMenuItemCancelLastCouponClosed = new javax.swing.JMenuItem();
        jMenuItemCouponList = new javax.swing.JMenuItem();

        jDialogCouponList.setTitle("Cupons Gerados Terminal");
        jDialogCouponList.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        jDialogCouponList.setType(java.awt.Window.Type.UTILITY);
        jDialogCouponList.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                jDialogCouponListWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jDialogCouponListWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                jDialogCouponListWindowClosing(evt);
            }
        });

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseReleased(evt);
            }
        });

        jTableCoupons.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCoupons.setToolTipText("Clique duas vezes para cancelar o cupom");
        jTableCoupons.setDefaultRenderer(Object.class, new MyCellRenderer());
        jTableCoupons.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCouponsMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableCouponsMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableCoupons);

        jDialogCouponList.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jMenu2.setText("Ações");

        jMenuItemCancelCouponSelected1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemCancelCouponSelected1.setText("Cancelar Cupom Selecionado");
        jMenuItemCancelCouponSelected1.setToolTipText("");
        jMenuItemCancelCouponSelected1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelCouponSelected1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemCancelCouponSelected1);

        jMenuItemPrintSelectedCoupon1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPrintSelectedCoupon1.setText("Reimprimir Cupom  Selecionado");
        jMenuItemPrintSelectedCoupon1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintSelectedCoupon1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPrintSelectedCoupon1);

        jMenuItemExitDetailedReportCashier1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemExitDetailedReportCashier1.setText("Sair");
        jMenuItemExitDetailedReportCashier1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitDetailedReportCashier1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemExitDetailedReportCashier1);

        jMenuBar2.add(jMenu2);

        jDialogCouponList.setJMenuBar(jMenuBar2);

        jMenuItemCancelCouponSelected.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemCancelCouponSelected.setText("Cancelar Cupom Selecionado");
        jMenuItemCancelCouponSelected.setToolTipText("");
        jMenuItemCancelCouponSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelCouponSelectedActionPerformed(evt);
            }
        });
        jPopupMenuCouponsTerminal.add(jMenuItemCancelCouponSelected);

        jMenuItemPrintSelectedCoupon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemPrintSelectedCoupon.setText("Reimprimir Cupom  Selecionado");
        jMenuItemPrintSelectedCoupon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPrintSelectedCouponActionPerformed(evt);
            }
        });
        jPopupMenuCouponsTerminal.add(jMenuItemPrintSelectedCoupon);

        jMenuItemExitDetailedReportCashier.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItemExitDetailedReportCashier.setText("Sair");
        jMenuItemExitDetailedReportCashier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitDetailedReportCashierActionPerformed(evt);
            }
        });
        jPopupMenuCouponsTerminal.add(jMenuItemExitDetailedReportCashier);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Opções");
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jScrollPane1.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jList1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jList1.setSelectionBackground(new java.awt.Color(255, 255, 51));
        jList1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jMenu1.setText("Ações");

        jMenuItemCancelLastIten.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        jMenuItemCancelLastIten.setText("Cancelar último item");
        jMenuItemCancelLastIten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelLastItenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCancelLastIten);

        jMenuItemCancelIten.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItemCancelIten.setText("Cancelar item");
        jMenuItemCancelIten.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelItenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCancelIten);

        jMenuItemCancelCoupon.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItemCancelCoupon.setText("Cancelar cupom");
        jMenuItemCancelCoupon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelCouponActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCancelCoupon);

        jMenuItemCancelLastCouponClosed.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItemCancelLastCouponClosed.setText("Cancelar Último Cupom Fechado");
        jMenuItemCancelLastCouponClosed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCancelLastCouponClosedActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCancelLastCouponClosed);

        jMenuItemCouponList.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jMenuItemCouponList.setText("Cancelar Cupom na Lista");
        jMenuItemCouponList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouponListActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCouponList);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCancelLastItenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelLastItenActionPerformed
        if (codeCoupon != null) {
            functionCancelLastProductList();
        } else {

            JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.");
            jTextProductCode.requestFocus(true);
        }
    }//GEN-LAST:event_jMenuItemCancelLastItenActionPerformed

    private void jMenuItemCancelItenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelItenActionPerformed
        if (codeCoupon != null) {
            functionCancelItem();
        } else {

            JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.");
            jTextProductCode.requestFocus(true);
        }
    }//GEN-LAST:event_jMenuItemCancelItenActionPerformed

    private void jMenuItemCancelCouponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelCouponActionPerformed
        if (codeCoupon != null) {
            functionCancelCoupon(codeCoupon);

        } else {

            JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.");
            jTextProductCode.requestFocus(true);
        }
    }//GEN-LAST:event_jMenuItemCancelCouponActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (isPrintLineCanceled) {
            if(BeanConfig.isIsPrintService()){
            printCancelIten(String.valueOf(numberItenCaceled), valueLastProductCancelTable);
            isPrintLineCanceled = false;
            jTextProductCode.requestFocus(true);
            }
        }
    }//GEN-LAST:event_formWindowClosed

    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            System.err.println("LINHA:" + jList1.getSelectedIndex());
            switch (jList1.getSelectedIndex()) {

                case 0:
                    if (codeCoupon != null) {
                        functionCancelLastProductList();
                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 1:
                    if (codeCoupon != null) {
                        functionCancelItem();
                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 2:
                    if (codeCoupon != null) {
                        functionCancelCoupon(codeCoupon);

                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;

                case 3:
                    if (isClosedCashier) {
                        if (JOptionPane.showConfirmDialog(this, "Deseja realmente cancelar o último cupom fechado deste terminal?", "Atenção", JOptionPane.YES_NO_OPTION) == 0) {
                            functionCancelLastCouponClosed();
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "O caixa já esta fechado. Esta operação não pode ser realizada neste momento.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 4:
                    if (isClosedCashier) {

                        functionCouponList();

                    } else {

                        JOptionPane.showMessageDialog(null, "O caixa já esta fechado. Esta operação não pode ser realizada neste momento.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;

                case 5:
                    //functionCancelCoupon(codeCoupon);
                    break;

            }
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        String[] strings = {"Cancelar Último Item [F3]", "Cancelar Item [F4]", "Cancelar Cupom em Aberto[F5]", "Cancelar Último Cupom Fechado[F6]", "Cancelar Cupom na Lista[F7]", "Cancelar Cupom por Código[F8]"};
        ((DefaultListModel) (jList1.getModel()))
                .removeAllElements();

        for (String string : strings) {
            ((DefaultListModel) (jList1.getModel())).addElement(string);
        }
        jList1.setSelectedIndex(0);
        isClosedCashier = ClassCashier.isOpened(jLabelTerminalNumber.getText()) != null;

    }//GEN-LAST:event_formWindowActivated

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (evt.getClickCount() == 1) {
            System.err.println("LINHA:" + jList1.getSelectedIndex());
            switch (jList1.getSelectedIndex()) {

                case 0:
                    if (codeCoupon != null) {
                        functionCancelLastProductList();
                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 1:
                    if (codeCoupon != null) {
                        functionCancelItem();
                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 2:
                    if (codeCoupon != null) {
                        functionCancelCoupon(codeCoupon);

                    } else {

                        JOptionPane.showMessageDialog(null, "Não exite cupom aberto para realizar esta operação.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;

                case 3:
                    if (isClosedCashier) {
                        if (JOptionPane.showConfirmDialog(this, "Deseja realmente cancelar o último cupom fechado deste terminal?", "Atenção", JOptionPane.YES_NO_OPTION) == 0) {
                            functionCancelLastCouponClosed();
                        }
                    } else {

                        JOptionPane.showMessageDialog(null, "O caixa já esta fechado. Esta operação não pode ser realizada neste momento.", "Aviso", JOptionPane.WARNING_MESSAGE);
                        jTextProductCode.requestFocus(true);
                    }
                    break;
                case 4:
                    if (isClosedCashier) {

                        functionCouponList();

                    }
            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jMenuItemCancelLastCouponClosedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelLastCouponClosedActionPerformed
        if (ClassCashier.isOpened(jLabelTerminalNumber.getText()) != null) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente cancelar o último cupom fechado deste terminal?", "", JOptionPane.YES_NO_OPTION) == 0) {
                functionCancelLastCouponClosed();
            }
        } else {

            JOptionPane.showMessageDialog(null, "O caixa já esta foi. Esta operação não pode ser realizada neste momento.", "Aviso", JOptionPane.WARNING_MESSAGE);
            jTextProductCode.requestFocus(true);
        }
    }//GEN-LAST:event_jMenuItemCancelLastCouponClosedActionPerformed

    private void jDialogCouponListWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogCouponListWindowActivated

        try {

            tableModelCoupon = new MyModelJtableCoupon(false, term);
            jTableCoupons.setModel(tableModelCoupon);

        } catch (Exception ex) {
            System.err.println("ERRO MODEL TABLE AVANCED SEARCH::" + ex);
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }
        jDialogCouponList.setTitle("Cupons Gerados Terminal " + term);
    }//GEN-LAST:event_jDialogCouponListWindowActivated

    private void jMenuItemCouponListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouponListActionPerformed
        if (isClosedCashier) {

            functionCouponList();

        } else {

            JOptionPane.showMessageDialog(null, "O caixa já esta fechado. Esta operação não pode ser realizada neste momento.", "Aviso", JOptionPane.WARNING_MESSAGE);
            jTextProductCode.requestFocus(true);
        }
    }//GEN-LAST:event_jMenuItemCouponListActionPerformed

    private void jTableCouponsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCouponsMouseClicked
        if (jTableCoupons.getRowCount() > 0) {

            if (evt.getClickCount() == 2) {
                functionCancelSelectedCoupon();
            }
        }
    }//GEN-LAST:event_jTableCouponsMouseClicked

    private void jMenuItemPrintSelectedCouponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintSelectedCouponActionPerformed
        functionPrintSelectedCoupon();
    }//GEN-LAST:event_jMenuItemPrintSelectedCouponActionPerformed

    private void jMenuItemCancelCouponSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelCouponSelectedActionPerformed
        functionCancelSelectedCoupon();
    }//GEN-LAST:event_jMenuItemCancelCouponSelectedActionPerformed

    private void jMenuItemExitDetailedReportCashierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitDetailedReportCashierActionPerformed
        this.jDialogCouponList.dispose();
    }//GEN-LAST:event_jMenuItemExitDetailedReportCashierActionPerformed

    private void jTableCouponsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCouponsMouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenuCouponsTerminal.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTableCouponsMouseReleased

    private void jScrollPane2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane2MouseReleased
        if (evt.isPopupTrigger()) {
            jPopupMenuCouponsTerminal.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jScrollPane2MouseReleased

    private void jMenuItemCancelCouponSelected1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCancelCouponSelected1ActionPerformed
        functionCancelSelectedCoupon();
    }//GEN-LAST:event_jMenuItemCancelCouponSelected1ActionPerformed

    private void jMenuItemPrintSelectedCoupon1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPrintSelectedCoupon1ActionPerformed
        functionPrintSelectedCoupon();
    }//GEN-LAST:event_jMenuItemPrintSelectedCoupon1ActionPerformed

    private void jMenuItemExitDetailedReportCashier1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitDetailedReportCashier1ActionPerformed
        this.jDialogCouponList.dispose();
    }//GEN-LAST:event_jMenuItemExitDetailedReportCashier1ActionPerformed

    private void jDialogCouponListWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogCouponListWindowClosed
        System.err.println("IS CANCELED>>>" + isCanceled);
        if (isCanceled) {

            codeCoupon = null;
            isGenerateCodeCoupon = true;
            isNewCoupon = true;
            number_item = 1; 
            jTextItens.setText("0");
            jTextTotalItens.setText("0");
            jTextValorTotalOperacao.setText("0,00");
            jTextValorUnitario.setText("0,00");
            jTextProductCode.requestFocus(true);
            jLabelDescricaoItem.setText("");

        }

    }//GEN-LAST:event_jDialogCouponListWindowClosed

    private void jDialogCouponListWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogCouponListWindowClosing

    }//GEN-LAST:event_jDialogCouponListWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogOptionsCancelCouponIten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogOptionsCancelCouponIten dialog = new JDialogOptionsCancelCouponIten(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jDialogCouponList;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItemCancelCoupon;
    private javax.swing.JMenuItem jMenuItemCancelCouponSelected;
    private javax.swing.JMenuItem jMenuItemCancelCouponSelected1;
    private javax.swing.JMenuItem jMenuItemCancelIten;
    private javax.swing.JMenuItem jMenuItemCancelLastCouponClosed;
    private javax.swing.JMenuItem jMenuItemCancelLastIten;
    private javax.swing.JMenuItem jMenuItemCouponList;
    private javax.swing.JMenuItem jMenuItemExitDetailedReportCashier;
    private javax.swing.JMenuItem jMenuItemExitDetailedReportCashier1;
    private javax.swing.JMenuItem jMenuItemPrintSelectedCoupon;
    private javax.swing.JMenuItem jMenuItemPrintSelectedCoupon1;
    private javax.swing.JPopupMenu jPopupMenuCouponsTerminal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCoupons;
    // End of variables declaration//GEN-END:variables

    private void printCancelIten(String numberIten, double valueItenCanceled) {

        PrintCoupon pc = new PrintCoupon();
        String numberItemStr;
        if (String.valueOf(numberIten).length() == 1) {
            numberItemStr = "00" + String.valueOf(numberIten);
        } else if (String.valueOf(numberIten).length() == 2) {
            numberItemStr = "0" + String.valueOf(numberIten);
        } else {
            numberItemStr = String.valueOf(numberIten);
        }
        switch (v.format(valueItenCanceled * -1).length()) {

            case 5:
                pc.print("\n       CANCELAMENTO ITEM: " + numberItemStr + "             " + v.format(valueItenCanceled * -1).replace(".", ",") + "$");
                break;
            case 6:
                pc.print("\n       CANCELAMENTO ITEM: " + numberItemStr + "            " + v.format(valueItenCanceled * -1).replace(".", ",") + "$");
                break;
            case 7:
                pc.print("\n       CANCELAMENTO ITEM: " + numberItemStr + "           " + v.format(valueItenCanceled * -1).replace(".", ",") + "$");
                break;
            case 8:
                pc.print("\n       CANCELAMENTO ITEM: " + numberItemStr + "          " + v.format(valueItenCanceled * -1).replace(".", ",") + "$");
                break;

        }

    }

    private void printCancelCoupon(String arg) {

        PrintCoupon pc = new PrintCoupon();

        pc.print("###############################################");
        pc.print("\n  CANCELAMENTO CUPOM NUM.: " + arg);
        pc.print("\n  DATA\\HORA DO CANCELAMENTO:" + DateActual.setDate(new Date(), "dd/MM/yyyy HH:mm:ss"));
        pc.print("\n  USUARIO: ROOT\t\r\n");
        pc.print("###############################################\t\r\n");
        pc.print("\r\n");
        pc.print("\r\n");
        pc.print("\r\n");
        pc.print("\r\n");
        pc.print("\r\n");
        pc.actionGuillotine();

    }

    private void functionCancelLastProductList() {
        Double v1 = Double.parseDouble(jTableItens.getValueAt(jTableItens.getRowCount() - 1, 3).toString().replace(",", "."));
        Double v2;
        if (v1 < 0) {
            v2 = 1.0;
        } else {
            v2 = v1;
        }
        valueLastProductCancelTable = Double.valueOf(jTableItens.getValueAt(jTableItens.getRowCount() - 1, 4).toString().replace(",", ".")) * v2;
        numberItenCaceled = Integer.parseInt(jTableItens.getValueAt(jTableItens.getRowCount() - 1, 0).toString());

        if (ClassSale.cancelProduct(codeCoupon, true, -v2, codeProductCoupon, numberItenCaceled, true)) {

            ClassSale.totalSale(codeCoupon);    
            jTextItens.setText(String.valueOf(jTableItens.getRowCount()));
            jTextValorTotalOperacao.setText(v.format(Sale.getPriceTotal()));
            jTextTotalItens.setText(String.valueOf(Sale.getQuantityTotal()));
            jTextProductCode.setText("");
            jTextValorUnitario.setText("0,00");
            Sale.setPriceTotal(Double.parseDouble(jTextValorTotalOperacao.getText().replace(",", ".")));
            jLabelDescricaoItem.setText("");
            isPrintLineCanceled = true;
            this.dispose();

        }
    }

    private void functionCancelItem() {
        this.dispose();
        new JDialogCancelItem(null, true).setVisible(true);
    }

    private void functionCancelCoupon(String arg) {
        
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente cancelar o cupom em aberto?", "", JOptionPane.YES_NO_OPTION) == 0) {
            if (ClassSale.cancelCoupon(arg)) {
                JOptionPane.showMessageDialog(null, "Cupom cancelado com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                ClassSale.cancelTypePaymentCoupon(arg);

                codeCoupon = null;
                isGenerateCodeCoupon = true;
                isNewCoupon = true;
                number_item = 1;                
                jTextItens.setText("0");
                jTextTotalItens.setText("0");
                jTextValorTotalOperacao.setText("0,00");
                jTextValorUnitario.setText("0,00");
                jTextProductCode.requestFocus(true);
                jLabelDescricaoItem.setText("");
                if (isPrintService) {
                    printCancelCoupon(arg);
                }
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao  cancelar cupom.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
        }
    }

    private void functionCancelLastCouponClosed() {
        String arg = ClassSale.cancelLastCouponClosed(jLabelTerminalNumber.getText());
        if (arg != null) {

            ClassSale.refreshReserve(arg, true);
            ClassSale.cancelTypePaymentCoupon(arg);
            JOptionPane.showMessageDialog(null, "O cupom N° " + arg + " foi cancelado com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
            if (isPrintService) {
                printCancelCoupon(arg);
            }
            this.dispose();
        }

    }

    private void functionCouponList() {

        this.jDialogCouponList.setBounds(JDialogOptionsCancelCouponIten.this.getX(), JDialogOptionsCancelCouponIten.this.getY(), 650, 500);
        this.jDialogCouponList.show();

    }

    private void functionCancelSelectedCoupon() {
        List<String> list = new ArrayList<>();
        isCanceled = false;
        String msg;
        for (int i = 0; i < jTableCoupons.getRowCount(); i++) {
            if (jTableCoupons.getValueAt(i, 0).equals(true)) {
                list.add((String) jTableCoupons.getValueAt(i, 1));
            }
        }

        if (list.size() > 1) {
            msg = "Deseja realmente cancelar os cupons selecionados?";
        } else {
            msg = "Deseja realmente cancelar o cupom selecionado?";
        }

        if (!list.isEmpty()) {
            if (JOptionPane.showConfirmDialog(this.jDialogCouponList, msg, "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {

                for (String list1 : list) {
                    System.err.println("COD COUPON CANCELED::::" + list1);

                    isCanceled = ClassSale.cancelCoupon(list1);
                    if (isCanceled) {
                        ClassSale.refreshReserve(list1, true);
                        ClassSale.cancelTypePaymentCoupon(list1);
                    }

                }
                if (isCanceled) {

                    if (list.size() > 1) {
                        JOptionPane.showMessageDialog(this.jDialogCouponList, "Cupons cancelados com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this.jDialogCouponList, "Cupom cancelado com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    }

                    if (isPrintService) {
                        for (String list1 : list) {

                            System.err.println("COD PRINT COUPON CANCELED::::" + list1);
                            printCancelCoupon(list1);

                        }
                        this.dispose();
                        jDialogCouponList.dispose();
                    }

                } else {

                    if (list.size() > 1) {
                        JOptionPane.showMessageDialog(null, "Erro ao  cancelar os cupons.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Erro ao  cancelar o cupom.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                try {

                    tableModelCoupon = new MyModelJtableCoupon(false, term);
                    jTableCoupons.setModel(tableModelCoupon);

                } catch (Exception ex) {
                    System.err.println("ERRO MODEL TABLE AVANCED SEARCH::" + ex);
                    System.err.println("ERROR::" + ex);
                    ////newXML.generateLog(ex.toString());
                }
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void functionPrintSelectedCoupon() {
        List<String> list = new ArrayList<>();
        isCanceled = false;
        String msg;
        for (int i = 0; i < jTableCoupons.getRowCount(); i++) {
            if (jTableCoupons.getValueAt(i, 0).equals(true)) {
                list.add((String) jTableCoupons.getValueAt(i, 1));
            }
        }

        if (list.size() > 1) {
            msg = "Deseja realmente reimprimir os cupons selecionados?";
        } else {
            msg = "Deseja realmente reimprimir o cupom selecionado?";
        }

        if (!list.isEmpty()) {

            if (JOptionPane.showConfirmDialog(this.jDialogCouponList, msg, "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {

                for (String list1 : list) {
                    System.err.println("COD COUPON REPRINT::::" + list1);

                    isCanceled = ClassSale.reprintCoupon(list1, false);

                }
                if (isCanceled) {

                    if (list.size() > 1) {
                        JOptionPane.showMessageDialog(this.jDialogCouponList, "Cupons reimpressos com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this.jDialogCouponList, "Cupom reimpresso com sucesso.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    }

                } else {

                    if (list.size() > 1) {
                        JOptionPane.showMessageDialog(null, "Erro ao  reimprimir os cupons.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Erro ao  reimprimir o cupom.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                try {

                    tableModelCoupon = new MyModelJtableCoupon(false, term);
                    jTableCoupons.setModel(tableModelCoupon);

                } catch (Exception ex) {
                    System.err.println("ERRO MODEL TABLE AVANCED SEARCH::" + ex);
                    System.err.println("ERROR::" + ex);
                    ////newXML.generateLog(ex.toString());
                }
            }
        } else {

            JOptionPane.showMessageDialog(null, "Selecione pelo menos um item na tabela.", "Aviso", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            Color bg;
            Font ft;

            if (!selected) {
                bg = ((row % 2 == 0)
                        ? alternateColor
                        : whiteColor);
            } else {
                bg = selectedColor;
            }

            if (jTableCoupons.getRowCount() > 0) {

                jTableCoupons.getColumnModel().getColumn(0).setPreferredWidth(1);
                jTableCoupons.getColumnModel().getColumn(1).setPreferredWidth(100);// define a largura da coluna
                jTableCoupons.getColumnModel().getColumn(2).setPreferredWidth(90);
                jTableCoupons.getColumnModel().getColumn(3).setPreferredWidth(50);
                jTableCoupons.getColumnModel().getColumn(4).setPreferredWidth(45);// define a largura da coluna
                jTableCoupons.getColumnModel().getColumn(5).setPreferredWidth(70);// define a largura da coluna
                jTableCoupons.getColumnModel().getColumn(6).setPreferredWidth(60);// define a largura da coluna

            }

            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);
            ft = ((column == 1 || column == 3 || column == 4)
                    ? new java.awt.Font("Tahoma", 1, 12)
                    : new java.awt.Font("Tahoma", 0, 11));
            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);

            setFont(ft);
            setBackground(bg);
            setForeground(selected
                    ? Color.black
                    : new java.awt.Color(102, 102, 102));
            setHorizontalAlignment(SwingConstants.CENTER);

            /*
             *  if (value instanceof ImageIcon) {
             * setIcon((ImageIcon) value);
             * setText("");
             * } else
             * setIcon(null);
             */
            return this;
        }
    }
}

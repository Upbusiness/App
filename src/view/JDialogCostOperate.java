/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.BeanTbl;
import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassCodRandon;
import model.ClassCostOperete;
import util.DateActual;
import util.JTextFieldTools;
import util.Mascaras;
import xml.NewXML;

/**
 *
 * @author Rafiusks
 */
public class JDialogCostOperate extends javax.swing.JDialog {

    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    private boolean controlEditTypeCost = false;
    private static final NewXML newXML = new NewXML();
    private MyModelJtableCostOperate jtableCostOperate;
    private MyModelJtableCategoryCostOperate jtableCategoryCostOperate;

    /**
     * Creates new form JDialogCostOperate
     *
     * @param parent
     * @param modal
     */
    public JDialogCostOperate(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialogTypeCost = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jTextFieldCodTypeCost = new javax.swing.JTextField();
        jTextDescriptionTypeCost = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableTypeCost = new javax.swing.JTable();
        jButtonSaveTypeCost = new javax.swing.JButton();
        jButtonEditTypeCost = new javax.swing.JButton();
        jButtonNewTypeCost = new javax.swing.JButton();
        jButtonDeleteTypeCost = new javax.swing.JButton();
        jButtonExitTypeCost = new javax.swing.JButton();
        jButtonCancelTypeCost = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTextFieldCod = new javax.swing.JTextField();
        jTextNumberDocCost = new javax.swing.JTextField();
        jTextFieldValueCost = new javax.swing.JTextField();
        jFormattedTextDateCost = new javax.swing.JFormattedTextField(Mascaras.maskDate());
        jComboBoxTypeCost = new javax.swing.JComboBox(ClassCostOperete.allTypeCost().toArray());
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaObservationCost = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCosts = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonSaveCost = new javax.swing.JButton();
        jButtonNewCost = new javax.swing.JButton();
        jButtonExitCost = new javax.swing.JButton();
        jButtonDeleteCost = new javax.swing.JButton();
        jButtonEditCost = new javax.swing.JButton();
        jButtonCancelCost = new javax.swing.JButton();

        jDialogTypeCost.setTitle("Tipo de Custo Operacional");
        jDialogTypeCost.setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        jDialogTypeCost.setType(java.awt.Window.Type.UTILITY);
        jDialogTypeCost.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                jDialogTypeCostWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jDialogTypeCostWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                jDialogTypeCostWindowOpened(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldCodTypeCost.setEditable(false);
        jTextFieldCodTypeCost.setBackground(new java.awt.Color(255, 255, 0));
        jTextFieldCodTypeCost.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jTextFieldCodTypeCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Código:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextFieldCodTypeCost.setEnabled(false);

        jTextDescriptionTypeCost.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTextDescriptionTypeCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Descrição:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextDescriptionTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextDescriptionTypeCostActionPerformed(evt);
            }
        });
        jTextDescriptionTypeCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextDescriptionTypeCostKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jTextFieldCodTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 360, Short.MAX_VALUE))
                    .add(jTextDescriptionTypeCost))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jTextFieldCodTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jTextDescriptionTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel4.setLayout(new java.awt.BorderLayout());

        jTableTypeCost.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableTypeCost.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableTypeCost.setRowHeight(25);
        jTableTypeCost.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTypeCostMouseClicked(evt);
            }
        });
        jTableTypeCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableTypeCostKeyPressed(evt);
            }
        });
        jTableTypeCost.setDefaultRenderer(Object.class, new MyCellRenderer());
        jScrollPane3.setViewportView(jTableTypeCost);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jButtonSaveTypeCost.setText("Salvar");
        jButtonSaveTypeCost.setEnabled(false);
        jButtonSaveTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveTypeCostActionPerformed(evt);
            }
        });

        jButtonEditTypeCost.setText("Editar");
        jButtonEditTypeCost.setEnabled(false);
        jButtonEditTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditTypeCostActionPerformed(evt);
            }
        });

        jButtonNewTypeCost.setText("Novo");
        jButtonNewTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewTypeCostActionPerformed(evt);
            }
        });

        jButtonDeleteTypeCost.setText("Excluir");
        jButtonDeleteTypeCost.setEnabled(false);
        jButtonDeleteTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteTypeCostActionPerformed(evt);
            }
        });

        jButtonExitTypeCost.setText("Sair");
        jButtonExitTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitTypeCostActionPerformed(evt);
            }
        });

        jButtonCancelTypeCost.setText("Cancelar");
        jButtonCancelTypeCost.setEnabled(false);
        jButtonCancelTypeCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelTypeCostActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jDialogTypeCostLayout = new org.jdesktop.layout.GroupLayout(jDialogTypeCost.getContentPane());
        jDialogTypeCost.getContentPane().setLayout(jDialogTypeCostLayout);
        jDialogTypeCostLayout.setHorizontalGroup(
            jDialogTypeCostLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialogTypeCostLayout.createSequentialGroup()
                .addContainerGap()
                .add(jDialogTypeCostLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jDialogTypeCostLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jDialogTypeCostLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jDialogTypeCostLayout.createSequentialGroup()
                                .add(jButtonSaveTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonCancelTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 87, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonEditTypeCost)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonNewTypeCost)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonDeleteTypeCost)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButtonExitTypeCost))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDialogTypeCostLayout.setVerticalGroup(
            jDialogTypeCostLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jDialogTypeCostLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jDialogTypeCostLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButtonSaveTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonNewTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonExitTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonDeleteTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonEditTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonCancelTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Custo Operacional");
        setModalityType(java.awt.Dialog.ModalityType.DOCUMENT_MODAL);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldCod.setEditable(false);
        jTextFieldCod.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldCod.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Código:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextFieldCod.setEnabled(false);
        jTextFieldCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodActionPerformed(evt);
            }
        });

        jTextNumberDocCost.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jTextNumberDocCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "N° Documento:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextNumberDocCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextNumberDocCostActionPerformed(evt);
            }
        });

        jTextFieldValueCost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldValueCost.setText("0.00");
        jTextFieldValueCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Valor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextFieldValueCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldValueCostActionPerformed(evt);
            }
        });
        jTextFieldValueCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldValueCostFocusGained(evt);
            }
        });
        jTextFieldValueCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldValueCostKeyReleased(evt);
            }
        });

        jFormattedTextDateCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Data:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14), new java.awt.Color(102, 102, 102))); // NOI18N
        jFormattedTextDateCost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jFormattedTextDateCost.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextDateCostFocusLost(evt);
            }
        });

        jComboBoxTypeCost.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jComboBoxTypeCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Categoria Custo:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10), new java.awt.Color(102, 102, 102))); // NOI18N
        jComboBoxTypeCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxTypeCostKeyPressed(evt);
            }
        });

        jTextAreaObservationCost.setColumns(20);
        jTextAreaObservationCost.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextAreaObservationCost.setRows(5);
        jTextAreaObservationCost.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Observações", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 10), new java.awt.Color(102, 102, 102))); // NOI18N
        jTextAreaObservationCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextAreaObservationCostKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaObservationCost);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(51, 51, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("+");
        jLabel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jTableCosts.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableCosts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTableCosts.setRowHeight(25);
        jTableCosts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCostsMouseClicked(evt);
            }
        });
        jTableCosts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableCostsKeyPressed(evt);
            }
        });
        jTableCosts.setDefaultRenderer(Object.class, new MyCellRenderer());
        jScrollPane1.setViewportView(jTableCosts);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextNumberDocCost)
                    .add(jScrollPane2)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jComboBoxTypeCost, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 31, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jTextFieldCod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jFormattedTextDateCost)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jTextFieldValueCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 246, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jTextFieldCod, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(12, 12, 12)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jComboBoxTypeCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(3, 3, 3)
                        .add(jLabel9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(18, 18, 18)
                .add(jTextNumberDocCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(11, 11, 11)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jFormattedTextDateCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextFieldValueCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(12, 12, 12)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setLayout(new java.awt.BorderLayout());

        jButtonSaveCost.setText("Salvar");
        jButtonSaveCost.setEnabled(false);
        jButtonSaveCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveCostActionPerformed(evt);
            }
        });

        jButtonNewCost.setText("Novo");
        jButtonNewCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCostActionPerformed(evt);
            }
        });

        jButtonExitCost.setText("Sair");
        jButtonExitCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitCostActionPerformed(evt);
            }
        });

        jButtonDeleteCost.setText("Excluir");
        jButtonDeleteCost.setEnabled(false);
        jButtonDeleteCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCostActionPerformed(evt);
            }
        });

        jButtonEditCost.setText("Editar");
        jButtonEditCost.setEnabled(false);
        jButtonEditCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCostActionPerformed(evt);
            }
        });

        jButtonCancelCost.setText("Cancelar");
        jButtonCancelCost.setEnabled(false);
        jButtonCancelCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelCostActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 594, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jButtonSaveCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(jButtonCancelCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(jButtonEditCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(jButtonNewCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(jButtonDeleteCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 89, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(jButtonExitCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(0, 12, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButtonSaveCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonCancelCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonEditCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonNewCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonDeleteCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonExitCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 34, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCostActionPerformed
        activeFields(true);
        clearFields();
        jFormattedTextDateCost.setText(DateActual.setDate(new Date(), "dd/MM/YYYY"));
        jTextFieldValueCost.setText("0,00");
        jButtonNewCost.setEnabled(false);
        jButtonDeleteCost.setEnabled(false);
        jComboBoxTypeCost.requestFocus(true);
        jButtonCancelCost.setEnabled(true);
        jButtonEditCost.setEnabled(false);
    }//GEN-LAST:event_jButtonNewCostActionPerformed

    private void jButtonSaveCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveCostActionPerformed

        if (!jFormattedTextDateCost.getText().equals("__/__/____") && !jTextFieldValueCost.getText().isEmpty()) {

            if (jFormattedTextDateCost.getValue() == null) {

                jFormattedTextDateCost.setValue(DateActual.setDate(new Date(), "dd/MM/YYYY"));
            }

            if (jTextFieldCod.getText().isEmpty()) {
                if (ClassCostOperete.newCost(fields())) {

                    JOptionPane.showMessageDialog(null, "Custo Operecional cadastrado com sucesso!", "Novo Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                    activeFields(false);
                    jButtonNewCost.setEnabled(true);
                }

                clearFields();
                activeFields(false);
                jButtonDeleteCost.setEnabled(false);
                jButtonNewCost.setEnabled(true);
                jButtonEditCost.setEnabled(false);
                jButtonSaveCost.setEnabled(false);
                jButtonCancelCost.setEnabled(false);

            } else {
                if (JOptionPane.showConfirmDialog(this, "Deseja realmente atualizar este cadastro?", "Aviso!", JOptionPane.YES_NO_OPTION) == 0) {
                    if (ClassCostOperete.refreshCost(fields())) {
                        JOptionPane.showMessageDialog(null, "Custo Operecional atualizado com sucesso!", "Atualização de Cadastro",
                                JOptionPane.INFORMATION_MESSAGE);
                    }

                    clearFields();
                    activeFields(false);
                    jButtonDeleteCost.setEnabled(false);
                    jButtonNewCost.setEnabled(true);
                    jButtonEditCost.setEnabled(false);
                    jButtonSaveCost.setEnabled(false);
                    jButtonCancelCost.setEnabled(false);

                }
            }
        }
        functionFillTableCostOperate();
    }//GEN-LAST:event_jButtonSaveCostActionPerformed

    private void jButtonExitCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitCostActionPerformed

        this.dispose();
    }//GEN-LAST:event_jButtonExitCostActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        functionFillTableCostOperate();
        activeFields(false);
    }//GEN-LAST:event_formWindowOpened

    private void jTableCostsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCostsMouseClicked

        if (jTableCosts.getModel().getRowCount() > 0) {
            ClassCostOperete.consultCost(jTableCosts.getValueAt(jTableCosts.getSelectedRow(), 0).toString());
            jButtonDeleteCost.setEnabled(true);
            activeFields(false);
            jButtonNewCost.setEnabled(true);
            jButtonEditCost.setEnabled(true);
        }


    }//GEN-LAST:event_jTableCostsMouseClicked

    private void jButtonDeleteCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCostActionPerformed

        if (!jTextFieldCod.getText().isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este cadastro?", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                if (ClassCostOperete.deleteCost(jTextFieldCod.getText())) {
                    JOptionPane.showMessageDialog(null, "Custo Operecional excluido com sucesso!", "Exclusão de Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                    functionFillTableCostOperate();
                    clearFields();
                    activeFields(false);
                    jButtonDeleteCost.setEnabled(false);
                    jButtonNewCost.setEnabled(true);
                    jButtonEditCost.setEnabled(false);
                    jButtonSaveCost.setEnabled(false);
                    jButtonCancelCost.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_jButtonDeleteCostActionPerformed

    private void jButtonEditCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCostActionPerformed
        activeFields(true);
        jComboBoxTypeCost.requestFocus(true);
        jButtonEditCost.setEnabled(false);
        jButtonCancelCost.setEnabled(true);
    }//GEN-LAST:event_jButtonEditCostActionPerformed

    private void jTextDescriptionTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextDescriptionTypeCostActionPerformed
        jButtonSaveTypeCost.requestFocus(true);
    }//GEN-LAST:event_jTextDescriptionTypeCostActionPerformed

    private void jTableTypeCostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTypeCostMouseClicked
        ClassCostOperete.consultTypeCost(jTableTypeCost.getValueAt(jTableTypeCost.getSelectedRow(), 0).toString());
        activeFieldsTypeCost(false);
        jButtonDeleteTypeCost.setEnabled(true);
        jButtonSaveTypeCost.setEnabled(false);
        jButtonNewTypeCost.setEnabled(true);
        jButtonEditTypeCost.setEnabled(true);
        jButtonCancelTypeCost.setEnabled(false);

    }//GEN-LAST:event_jTableTypeCostMouseClicked

    private void jButtonSaveTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveTypeCostActionPerformed
        if (!controlEditTypeCost) {
            if (ClassCostOperete.newTypeCost(fieldsTypeCost())) {

                JOptionPane.showMessageDialog(null, "Tipo de Custo Operecional cadastrado com sucesso!", "Novo Cadastro",
                        JOptionPane.INFORMATION_MESSAGE);
                activeFieldsTypeCost(false);
                jButtonNewTypeCost.setEnabled(true);
            }

            functionFillTableCategoryCostOperate();
            clearFieldsTypeCost();
            activeFieldsTypeCost(false);
            jButtonDeleteTypeCost.setEnabled(false);
            jButtonNewTypeCost.setEnabled(true);
            jButtonEditTypeCost.setEnabled(false);
            jButtonSaveTypeCost.setEnabled(false);
            jButtonCancelTypeCost.setEnabled(false);

        } else {

            if (JOptionPane.showConfirmDialog(this, "Deseja realmente atualizar este cadastro?", "Aviso!", JOptionPane.YES_NO_OPTION) == 0) {

                if (ClassCostOperete.refreshTypeCost(fieldsTypeCost())) {
                    JOptionPane.showMessageDialog(null, "Tipo de Custo Operecional atualizado com sucesso!", "Atualização de Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                functionFillTableCategoryCostOperate();
                clearFieldsTypeCost();
                activeFieldsTypeCost(false);
                jButtonDeleteTypeCost.setEnabled(false);
                jButtonNewTypeCost.setEnabled(true);
                jButtonEditTypeCost.setEnabled(false);
                jButtonSaveTypeCost.setEnabled(false);
                jButtonCancelTypeCost.setEnabled(false);
            }
        }

    }//GEN-LAST:event_jButtonSaveTypeCostActionPerformed

    private void jButtonEditTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditTypeCostActionPerformed
        controlEditTypeCost = true;
        jButtonNewTypeCost.setEnabled(false);
        jButtonDeleteTypeCost.setEnabled(false);
        jTextDescriptionTypeCost.setEnabled(true);
        jTextDescriptionTypeCost.requestFocus(true);
        jButtonEditTypeCost.setEnabled(false);
        jButtonSaveTypeCost.setEnabled(true);
        jButtonCancelTypeCost.setEnabled(true);
    }//GEN-LAST:event_jButtonEditTypeCostActionPerformed

    private void jButtonNewTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewTypeCostActionPerformed
        controlEditTypeCost = false;
        activeFieldsTypeCost(true);
        clearFieldsTypeCost();
        String str = null;
        do {

            str = ClassCodRandon.codeGeneratorCostOperate();
            System.err.println("GERANDO COD>>>>>>>>>>");

        } while (ClassCostOperete.consultCodTypeCost(str));

        jTextFieldCodTypeCost.setText(str);
        jButtonNewTypeCost.setEnabled(false);
        jButtonDeleteTypeCost.setEnabled(false);
        jTextDescriptionTypeCost.requestFocus(true);
        jButtonEditTypeCost.setEnabled(false);
        jButtonSaveTypeCost.setEnabled(true);
        jButtonCancelTypeCost.setEnabled(true);
    }//GEN-LAST:event_jButtonNewTypeCostActionPerformed

    private void jButtonDeleteTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteTypeCostActionPerformed
        if (!jTextFieldCodTypeCost.getText().isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente excluir este cadastro?\n Esta ação apagara todos custos deste tipo.\nDeseja realmente exclui-lo?", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                if (ClassCostOperete.deleteTypeCost(jTextFieldCodTypeCost.getText())) {
                    JOptionPane.showMessageDialog(null, "Tipo de Custo Operecional excluido com sucesso!", "Exclusão de Cadastro",
                            JOptionPane.INFORMATION_MESSAGE);
                    functionFillTableCostOperate();
                    clearFieldsTypeCost();
                    activeFieldsTypeCost(false);
                    jButtonDeleteTypeCost.setEnabled(false);
                    jButtonNewTypeCost.setEnabled(true);
                    jButtonEditTypeCost.setEnabled(false);
                    jButtonSaveTypeCost.setEnabled(false);
                    jButtonCancelTypeCost.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_jButtonDeleteTypeCostActionPerformed

    private void jButtonExitTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitTypeCostActionPerformed
        jDialogTypeCost.dispose();
    }//GEN-LAST:event_jButtonExitTypeCostActionPerformed

    private void jDialogTypeCostWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogTypeCostWindowClosed
       
    }//GEN-LAST:event_jDialogTypeCostWindowClosed

    private void jDialogTypeCostWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogTypeCostWindowOpened
        functionFillTableCategoryCostOperate();
    }//GEN-LAST:event_jDialogTypeCostWindowOpened

    private void jButtonCancelTypeCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelTypeCostActionPerformed
        clearFieldsTypeCost();
        activeFieldsTypeCost(false);
        jButtonDeleteTypeCost.setEnabled(false);
        jButtonNewTypeCost.setEnabled(true);
        jButtonEditTypeCost.setEnabled(false);
        jButtonSaveTypeCost.setEnabled(false);
        jButtonCancelTypeCost.setEnabled(false);
        controlEditTypeCost = false;
    }//GEN-LAST:event_jButtonCancelTypeCostActionPerformed

    private void jButtonCancelCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelCostActionPerformed
        clearFields();
        activeFields(false);
        jButtonDeleteCost.setEnabled(false);
        jButtonNewCost.setEnabled(true);
        jButtonEditCost.setEnabled(false);
        jButtonSaveCost.setEnabled(false);
        jButtonCancelCost.setEnabled(false);

    }//GEN-LAST:event_jButtonCancelCostActionPerformed

    private void jTextDescriptionTypeCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextDescriptionTypeCostKeyReleased
        formatUpperCase(jTextDescriptionTypeCost);
    }//GEN-LAST:event_jTextDescriptionTypeCostKeyReleased

    private void jTableCostsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCostsKeyPressed
        if (jTableCosts.getRowCount() > 0) {

            switch (evt.getKeyCode()) {

                case KeyEvent.VK_DOWN:
                    try {
                        String arg = jTableCosts.getValueAt(jTableCosts.getSelectedRow() + 1, 0).toString();
                        ClassCostOperete.consultCost(arg);
                        jTableCosts.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableCosts.getValueAt(jTableCosts.getSelectedRow(), 0).toString();
                        ClassCostOperete.consultCost(arg);
                        activeFields(false);
                        jButtonDeleteCost.setEnabled(true);
                        jButtonSaveCost.setEnabled(false);
                        jButtonNewCost.setEnabled(true);
                        jButtonEditCost.setEnabled(true);
                        jButtonCancelCost.setEnabled(false);

                        jTableCosts.requestFocus(true);
                    }

                    break;

                case KeyEvent.VK_UP:
                    try {
                        String arg = jTableCosts.getValueAt(jTableCosts.getSelectedRow() - 1, 0).toString();
                        ClassCostOperete.consultCost(arg);
                        jTableCosts.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableCosts.getValueAt(jTableCosts.getSelectedRow(), 0).toString();
                        ClassCostOperete.consultCost(arg);
                        activeFieldsTypeCost(false);
                        jButtonDeleteCost.setEnabled(true);
                        jButtonSaveCost.setEnabled(false);
                        jButtonNewCost.setEnabled(true);
                        jButtonEditCost.setEnabled(true);
                        jButtonCancelCost.setEnabled(false);

                        jTableCosts.requestFocus(true);
                    }

                    break;

            }

        }
    }//GEN-LAST:event_jTableCostsKeyPressed

    private void jTableTypeCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableTypeCostKeyPressed
        if (jTableTypeCost.getRowCount() > 0) {

            switch (evt.getKeyCode()) {

                case KeyEvent.VK_DOWN:
                    try {
                        String arg = jTableTypeCost.getValueAt(jTableTypeCost.getSelectedRow() + 1, 0).toString();
                        ClassCostOperete.consultTypeCost(arg);
                        jTableCosts.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableTypeCost.getValueAt(jTableTypeCost.getSelectedRow(), 0).toString();
                        ClassCostOperete.consultTypeCost(arg);
                        activeFieldsTypeCost(false);
                        jButtonDeleteTypeCost.setEnabled(true);
                        jButtonSaveTypeCost.setEnabled(false);
                        jButtonNewTypeCost.setEnabled(true);
                        jButtonEditTypeCost.setEnabled(true);
                        jButtonCancelTypeCost.setEnabled(false);

                        jTableTypeCost.requestFocus(true);
                    }

                    break;

                case KeyEvent.VK_UP:
                    try {
                        String arg = jTableTypeCost.getValueAt(jTableTypeCost.getSelectedRow() - 1, 0).toString();
                        ClassCostOperete.consultTypeCost(arg);
                        jTableTypeCost.requestFocus(true);
                    } catch (java.lang.ArrayIndexOutOfBoundsException ex) {
                        System.err.println("ERROR::" + ex);
                        //newXML.generateLog(ex.toString());
                        String arg = jTableTypeCost.getValueAt(jTableTypeCost.getSelectedRow(), 0).toString();
                        ClassCostOperete.consultTypeCost(arg);
                        activeFieldsTypeCost(false);
                        jButtonDeleteTypeCost.setEnabled(true);
                        jButtonSaveTypeCost.setEnabled(false);
                        jButtonNewTypeCost.setEnabled(true);
                        jButtonEditTypeCost.setEnabled(true);
                        jButtonCancelTypeCost.setEnabled(false);

                        jTableTypeCost.requestFocus(true);
                    }

                    break;

            }

        }
    }//GEN-LAST:event_jTableTypeCostKeyPressed

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        Dimension tamanhoDialogMain = getSize();
        Dimension tamanhoDialog1 = jDialogTypeCost.getPreferredSize();
        Point loc = getLocation();
        jDialogTypeCost.setLocation(
                (tamanhoDialogMain.width - tamanhoDialog1.width) / 2 + loc.x,
                (tamanhoDialogMain.height - tamanhoDialog1.height) / 2 + loc.y);
        jDialogTypeCost.setModal(true);
        jDialogTypeCost.pack();
        jDialogTypeCost.setVisible(true);

        functionFillComboTypeCost(ClassCostOperete.allTypeCost());
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jTextAreaObservationCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaObservationCostKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jButtonSaveCost.requestFocus(true);
        }
    }//GEN-LAST:event_jTextAreaObservationCostKeyPressed

    private void jComboBoxTypeCostKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxTypeCostKeyPressed
        if (evt.getExtendedKeyCode() == KeyEvent.VK_ENTER) {
            jTextNumberDocCost.requestFocus(true);
        }
    }//GEN-LAST:event_jComboBoxTypeCostKeyPressed

    private void jFormattedTextDateCostFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextDateCostFocusLost
        JTextFieldTools.validImputDate(jFormattedTextDateCost, true);
    }//GEN-LAST:event_jFormattedTextDateCostFocusLost

    private void jTextFieldValueCostKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldValueCostKeyReleased
        JTextFieldTools.formatJTextNumber(jTextFieldValueCost);
    }//GEN-LAST:event_jTextFieldValueCostKeyReleased

    private void jTextFieldValueCostFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldValueCostFocusGained
        jTextFieldValueCost.setSelectionStart(0);
        jTextFieldValueCost.setSelectionEnd(jTextFieldValueCost.getText().length());
    }//GEN-LAST:event_jTextFieldValueCostFocusGained

    private void jTextFieldValueCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldValueCostActionPerformed
        jTextAreaObservationCost.requestFocus(true);
    }//GEN-LAST:event_jTextFieldValueCostActionPerformed

    private void jTextNumberDocCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextNumberDocCostActionPerformed
        jTextFieldValueCost.requestFocus(true);
    }//GEN-LAST:event_jTextNumberDocCostActionPerformed

    private void jTextFieldCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        //código para sair da JDialog com ESC
        Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {

            @Override
            public void eventDispatched(final AWTEvent event) {
                if (event.getID() == KeyEvent.KEY_PRESSED) {
                    final KeyEvent evt = (KeyEvent) event;

                    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

                     

                    }
                }

            }
        }, AWTEvent.KEY_EVENT_MASK);
    }//GEN-LAST:event_formWindowActivated

    private void jDialogTypeCostWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialogTypeCostWindowActivated
        //código para sair da JDialog com ESC
        Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {

            @Override
            public void eventDispatched(final AWTEvent event) {
                if (event.getID() == KeyEvent.KEY_PRESSED) {
                    final KeyEvent evt = (KeyEvent) event;

                    if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {

                        jDialogTypeCost.dispose();

                    }
                }

            }
        }, AWTEvent.KEY_EVENT_MASK);
    }//GEN-LAST:event_jDialogTypeCostWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogCostOperate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogCostOperate dialog = new JDialogCostOperate(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    static javax.swing.JButton jButtonCancelCost;
    private javax.swing.JButton jButtonCancelTypeCost;
    static javax.swing.JButton jButtonDeleteCost;
    private javax.swing.JButton jButtonDeleteTypeCost;
    static javax.swing.JButton jButtonEditCost;
    private javax.swing.JButton jButtonEditTypeCost;
    static javax.swing.JButton jButtonExitCost;
    private javax.swing.JButton jButtonExitTypeCost;
    static javax.swing.JButton jButtonNewCost;
    private javax.swing.JButton jButtonNewTypeCost;
    private static javax.swing.JButton jButtonSaveCost;
    private static javax.swing.JButton jButtonSaveTypeCost;
    public static javax.swing.JComboBox jComboBoxTypeCost;
    private javax.swing.JDialog jDialogTypeCost;
    public static javax.swing.JFormattedTextField jFormattedTextDateCost;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableCosts;
    private javax.swing.JTable jTableTypeCost;
    public static javax.swing.JTextArea jTextAreaObservationCost;
    public static javax.swing.JTextField jTextDescriptionTypeCost;
    public static javax.swing.JTextField jTextFieldCod;
    public static javax.swing.JTextField jTextFieldCodTypeCost;
    public static javax.swing.JTextField jTextFieldValueCost;
    public static javax.swing.JTextField jTextNumberDocCost;
    // End of variables declaration//GEN-END:variables

    public void clearFields() {

        JComponent[] field = fields();

        for (JComponent field1 : field) {
            if (field1 instanceof javax.swing.JTextField) {
                JTextField jTextField = (javax.swing.JTextField) field1;
                jTextField.setText("");
            }
            if (field1 instanceof javax.swing.JTextArea) {
                JTextArea jTextArea = (javax.swing.JTextArea) field1;
                jTextArea.setText("");
            }
        }

    }

    public static void clearFieldsTypeCost() {

        JTextField[] jTextField = fieldsTypeCost();

        for (JTextField jTextField1 : jTextField) {
            jTextField1.setText("");
        }

    }

    public static JComponent[] fields() {
        JComponent[] field = {jTextFieldCod, jComboBoxTypeCost, jFormattedTextDateCost, jTextFieldValueCost, jTextNumberDocCost, jTextAreaObservationCost};
        return field;
    }

    public static JTextField[] fieldsTypeCost() {
        JTextField[] field = {jTextFieldCodTypeCost, jTextDescriptionTypeCost};
        return field;
    }

    private static void activeFields(boolean b) {

        JComponent[] field = fields();

        for (int i = 1; i < field.length; i++) {

            field[i].setEnabled(b);
            jButtonSaveCost.setEnabled(b);

        }

    }

    private static void activeFieldsTypeCost(boolean b) {

        JComponent[] field = fieldsTypeCost();

        for (int i = 1; i < field.length; i++) {

            field[i].setEnabled(b);
            jButtonSaveTypeCost.setEnabled(b);

        }
    }

    public static void comboTypeCost(List<String> list) {

        ((DefaultComboBoxModel) (jComboBoxTypeCost.getModel()))
                .removeAllElements();

        for (String list1 : list) {
            ((DefaultComboBoxModel) (jComboBoxTypeCost.getModel())).addElement(list1);
        }
    }

    private void formatUpperCase(JTextField jTextField) {
        jTextField.setText(jTextField.getText().toUpperCase());
    }

    private void functionFillTableCostOperate() {

        jtableCostOperate = new MyModelJtableCostOperate();
        jTableCosts.setModel(jtableCostOperate);
    }

    private void functionFillTableCategoryCostOperate() {

        jtableCategoryCostOperate = new MyModelJtableCategoryCostOperate();
        jTableTypeCost.setModel(jtableCategoryCostOperate);
    }

    private void functionFillComboTypeCost(List<String> list) {

        ((DefaultComboBoxModel) (jComboBoxTypeCost.getModel()))
                .removeAllElements();

        for (String list1 : list) {
            ((DefaultComboBoxModel) (jComboBoxTypeCost.getModel())).addElement(list1);
        }

    }
    

    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            Color bg;

            if (!selected) {
                bg = ((row % 2 == 0)
                        ? alternateColor
                        : whiteColor);
            } else {
                bg = selectedColor;
            }

            if (jTableCosts.getRowCount() > 0) {

                jTableCosts.getColumnModel().getColumn(0).setPreferredWidth(15);
                jTableCosts.getColumnModel().getColumn(1).setPreferredWidth(50);// define a largura da coluna
                jTableCosts.getColumnModel().getColumn(2).setPreferredWidth(150);
                jTableCosts.getColumnModel().getColumn(3).setPreferredWidth(50);
                jTableCosts.getColumnModel().getColumn(4).setPreferredWidth(160);

            }
            if (jTableTypeCost.getRowCount() > 0) {

                jTableTypeCost.getColumnModel().getColumn(0).setPreferredWidth(20);
                jTableTypeCost.getColumnModel().getColumn(1).setPreferredWidth(300);// define a largura da coluna

            }

            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);
            setBackground(bg);
            setForeground(selected
                    ? Color.black
                    : new java.awt.Color(102, 102, 102));
            setHorizontalAlignment(SwingConstants.CENTER);

            /*
                 *  if (value instanceof ImageIcon) {
             * setIcon((ImageIcon) value);
             * setText("");
             * } else
             * setIcon(null);
             */
            return this;
        }
    }

}

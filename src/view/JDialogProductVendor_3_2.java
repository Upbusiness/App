/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import action.BeanProductTransition;
import action.BeanVendorTransition;
import java.awt.AWTEvent;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.AWTEventListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.ClassVendor;
import xml.NewXML;

/**
 *
 * @author CPU
 */
public class JDialogProductVendor_3_2 extends javax.swing.JDialog {

    private final Color whiteColor = Color.white;                 // new Color(254, 254, 254);
    private final Color alternateColor = new Color(227, 227, 227);    // Color.lightGray;//new Color(204, 204, 204);
    private final Color selectedColor = Color.yellow;
    private MyModelJtableAllProductVendor tableProducts;
    private MyModelJtableProductVendor tableProductsVendor;
    private static final NewXML newXML = new NewXML();

    /**
     * Creates new form JDialogProductVendor
     *
     * @param parent
     * @param modal
     */
    public JDialogProductVendor_3_2(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelProducts = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProductsVendor = new javax.swing.JTable();
        jPanelProductsVendor = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProducts = new javax.swing.JTable();
        jPanelSearchProduct = new javax.swing.JPanel();
        jTextFieldBarCodeProductVendor = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jTextFieldDescriptionProductProductVendor = new javax.swing.JTextField();
        jTextFieldCodeVendorProductVendor = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextFieldNameVendorProductVendor = new javax.swing.JTextField();
        jButtonAddProductVendor = new javax.swing.JButton();
        jButtonRemoveProductVendor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Produtos Fornecedor(es)");
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanelProducts.setBorder(javax.swing.BorderFactory.createTitledBorder("Produtos Fornecedor"));
        jPanelProducts.setLayout(new java.awt.BorderLayout());

        jTableProductsVendor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableProductsVendor.setCellSelectionEnabled(true);
        jTableProductsVendor.setEditingColumn(0);
        jTableProductsVendor.setEditingRow(0);
        jTableProductsVendor.setDefaultRenderer(Object.class, new MyCellRenderer());
        jTableProductsVendor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductsVendorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableProductsVendor);

        jPanelProducts.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanelProductsVendor.setBorder(javax.swing.BorderFactory.createTitledBorder("Produtos"));
        jPanelProductsVendor.setRequestFocusEnabled(false);
        jPanelProductsVendor.setLayout(new java.awt.BorderLayout());

        jTableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTableProducts.setDefaultRenderer(Object.class, new MyCellRenderer());
        jTableProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableProductsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableProducts);

        jPanelProductsVendor.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanelSearchProduct.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextFieldBarCodeProductVendor.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jTextFieldBarCodeProductVendor.setForeground(new java.awt.Color(51, 51, 51));
        jTextFieldBarCodeProductVendor.setToolTipText("");
        jTextFieldBarCodeProductVendor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldBarCodeProductVendorFocusGained(evt);
            }
        });
        jTextFieldBarCodeProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldBarCodeProductVendorActionPerformed(evt);
            }
        });
        jTextFieldBarCodeProductVendor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldBarCodeProductVendorKeyReleased(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Dialog", 3, 13)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Código de Barra:");

        jLabel18.setFont(new java.awt.Font("Dialog", 3, 13)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("Descrição: ");

        jTextFieldDescriptionProductProductVendor.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jTextFieldDescriptionProductProductVendor.setForeground(new java.awt.Color(51, 51, 51));
        jTextFieldDescriptionProductProductVendor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDescriptionProductProductVendorFocusGained(evt);
            }
        });
        jTextFieldDescriptionProductProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDescriptionProductProductVendorActionPerformed(evt);
            }
        });
        jTextFieldDescriptionProductProductVendor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldDescriptionProductProductVendorKeyReleased(evt);
            }
        });

        jTextFieldCodeVendorProductVendor.setEditable(false);
        jTextFieldCodeVendorProductVendor.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jTextFieldCodeVendorProductVendor.setForeground(new java.awt.Color(51, 51, 51));
        jTextFieldCodeVendorProductVendor.setToolTipText("");
        jTextFieldCodeVendorProductVendor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldCodeVendorProductVendorFocusGained(evt);
            }
        });
        jTextFieldCodeVendorProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldCodeVendorProductVendorActionPerformed(evt);
            }
        });
        jTextFieldCodeVendorProductVendor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCodeVendorProductVendorKeyReleased(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Dialog", 3, 13)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Código Fornecedor: ");

        jLabel20.setFont(new java.awt.Font("Dialog", 3, 13)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 51, 51));
        jLabel20.setText("Nome Fornecedor: ");

        jTextFieldNameVendorProductVendor.setEditable(false);
        jTextFieldNameVendorProductVendor.setFont(new java.awt.Font("Dialog", 3, 18)); // NOI18N
        jTextFieldNameVendorProductVendor.setForeground(new java.awt.Color(51, 51, 51));
        jTextFieldNameVendorProductVendor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNameVendorProductVendorFocusGained(evt);
            }
        });
        jTextFieldNameVendorProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNameVendorProductVendorActionPerformed(evt);
            }
        });
        jTextFieldNameVendorProductVendor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldNameVendorProductVendorKeyReleased(evt);
            }
        });

        jButtonAddProductVendor.setText("Adicionar Selecionado");
        jButtonAddProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddProductVendorActionPerformed(evt);
            }
        });

        jButtonRemoveProductVendor.setText("Remover Selecionado");
        jButtonRemoveProductVendor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveProductVendorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelSearchProductLayout = new javax.swing.GroupLayout(jPanelSearchProduct);
        jPanelSearchProduct.setLayout(jPanelSearchProductLayout);
        jPanelSearchProductLayout.setHorizontalGroup(
            jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(58, 58, 58))
                            .addComponent(jTextFieldBarCodeProductVendor))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jTextFieldDescriptionProductProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jTextFieldCodeVendorProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jTextFieldNameVendorProductVendor))))
                .addGap(56, 56, 56)
                .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonRemoveProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAddProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63))
        );
        jPanelSearchProductLayout.setVerticalGroup(
            jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchProductLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonAddProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRemoveProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldNameVendorProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(36, 36, 36))
                            .addGroup(jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldCodeVendorProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(jPanelSearchProductLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(10, 10, 10)
                                .addComponent(jTextFieldDescriptionProductProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelSearchProductLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldBarCodeProductVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelSearchProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelProductsVendor, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelProductsVendor, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                    .addComponent(jPanelProducts, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldBarCodeProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeProductVendorActionPerformed

        if (!jTextFieldBarCodeProductVendor.getText().isEmpty()) {
            if (!ClassVendor.consultProductVendor(jTextFieldBarCodeProductVendor.getText())) {

                JOptionPane.showMessageDialog(this, "Produto não cadastrado.");
                jTextFieldBarCodeProductVendor.setText("");

            } else {

                if (!ClassVendor.conteinIsProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText())) {

                    if (ClassVendor.addProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText())) {

                        try {
                            tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                            jTableProductsVendor.setModel(tableProductsVendor);
                        } catch (Exception ex) {
                            System.err.println("ERROR::" + ex);
                            ////newXML.generateLog(ex.toString());
                        }
                        JOptionPane.showMessageDialog(this, "Produto Adicionado com Sucesso.");

                    } else {
                        JOptionPane.showMessageDialog(this, "Erro ao Adicionar Produto.");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Este produto já esta na lista de produtos deste fornecedor, verifique.");
                }
            }
        }
    }//GEN-LAST:event_jTextFieldBarCodeProductVendorActionPerformed

    private void jTextFieldBarCodeProductVendorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeProductVendorFocusGained

    }//GEN-LAST:event_jTextFieldBarCodeProductVendorFocusGained

    private void jTextFieldBarCodeProductVendorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldBarCodeProductVendorKeyReleased

    }//GEN-LAST:event_jTextFieldBarCodeProductVendorKeyReleased

    private void jTextFieldDescriptionProductProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDescriptionProductProductVendorActionPerformed
        if (!jTextFieldDescriptionProductProductVendor.getText().isEmpty()) {
            try {
                tableProducts = new MyModelJtableAllProductVendor(jTextFieldDescriptionProductProductVendor.getText() + "%");
                jTableProducts.setModel(tableProducts);
            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }
        }
    }//GEN-LAST:event_jTextFieldDescriptionProductProductVendorActionPerformed

    private void jTextFieldDescriptionProductProductVendorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDescriptionProductProductVendorFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescriptionProductProductVendorFocusGained

    private void jTextFieldDescriptionProductProductVendorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDescriptionProductProductVendorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDescriptionProductProductVendorKeyReleased

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened


    }//GEN-LAST:event_formWindowOpened

    private void jTableProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductsMouseClicked
        if (jTableProducts.getRowCount() > 0) {

            jTextFieldBarCodeProductVendor.setText(jTableProducts.getValueAt(jTableProducts.getSelectedRow(), 1).toString());
            jTextFieldDescriptionProductProductVendor.setText(jTableProducts.getValueAt(jTableProducts.getSelectedRow(), 2).toString());

        }
        if (evt.getClickCount() == 2) {

            if (!ClassVendor.conteinIsProductVendor((String) jTableProducts.getValueAt(jTableProducts.getSelectedRow(), 1), jTextFieldCodeVendorProductVendor.getText())) {

                if (ClassVendor.addProductVendor(jTableProducts.getValueAt(jTableProducts.getSelectedRow(), 1), jTextFieldCodeVendorProductVendor.getText())) {

                    try {
                        tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                        jTableProductsVendor.setModel(tableProductsVendor);
                    } catch (Exception ex) {
                        System.err.println("ERROR::" + ex);
                        ////newXML.generateLog(ex.toString());
                    }
                    JOptionPane.showMessageDialog(this, "Produto Adicionado com Sucesso.");

                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao Adicionar Produto.");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Este produto já esta na lista de produtos deste fornecedor, verifique.");
            }
        }


    }//GEN-LAST:event_jTableProductsMouseClicked

    private void jTextFieldCodeVendorProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldCodeVendorProductVendorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodeVendorProductVendorActionPerformed

    private void jTextFieldCodeVendorProductVendorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCodeVendorProductVendorFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodeVendorProductVendorFocusGained

    private void jTextFieldCodeVendorProductVendorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodeVendorProductVendorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldCodeVendorProductVendorKeyReleased

    private void jTextFieldNameVendorProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNameVendorProductVendorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNameVendorProductVendorActionPerformed

    private void jTextFieldNameVendorProductVendorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNameVendorProductVendorFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNameVendorProductVendorFocusGained

    private void jTextFieldNameVendorProductVendorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameVendorProductVendorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldNameVendorProductVendorKeyReleased

    private void jTableProductsVendorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableProductsVendorMouseClicked
        if (jTableProductsVendor.getRowCount() > 0) {

            jTextFieldBarCodeProductVendor.setText(jTableProductsVendor.getValueAt(jTableProductsVendor.getSelectedRow(), 1).toString());
            jTextFieldDescriptionProductProductVendor.setText(jTableProductsVendor.getValueAt(jTableProductsVendor.getSelectedRow(), 2).toString());

        }
        if (evt.getClickCount() == 2) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente remover este produto do fornecedor? ", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                if (ClassVendor.removeProductVendor(jTableProductsVendor.getValueAt(jTableProductsVendor.getSelectedRow(), 1), jTextFieldCodeVendorProductVendor.getText())) {

                    try {
                        tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                        jTableProductsVendor.setModel(tableProductsVendor);
                    } catch (Exception ex) {
                        System.err.println("ERROR::" + ex);
                        ////newXML.generateLog(ex.toString());
                    }
                    JOptionPane.showMessageDialog(this, "Produto Removido com Sucesso.");

                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao Remover Produto.");
                }
            }
        }
    }//GEN-LAST:event_jTableProductsVendorMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

         Toolkit.getDefaultToolkit().addAWTEventListener(new AWTEventListener() {

            @Override
         public void eventDispatched(final AWTEvent event){
            if(event.getID() == KeyEvent.KEY_PRESSED){
                final KeyEvent evt = (KeyEvent)event;
               
                if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
                    
                    dispose();
                    
                }
            }
            
        }
        },AWTEvent.KEY_EVENT_MASK);
        
        jTextFieldCodeVendorProductVendor.setText(BeanVendorTransition.getCode());
        jTextFieldNameVendorProductVendor.setText(BeanVendorTransition.getDescription());
        
        if (BeanProductTransition.isControl()) {
            
            jTextFieldDescriptionProductProductVendor.setText(BeanProductTransition.getDescription());
            jTextFieldBarCodeProductVendor.setText(BeanProductTransition.getCode());
            jTextFieldBarCodeProductVendor.requestFocus(true);
            
        } else {
            
            jTextFieldDescriptionProductProductVendor.requestFocus(true);
            
        }
        try {
            tableProducts = new MyModelJtableAllProductVendor(null);
            jTableProducts.setModel(tableProducts);
        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }

        try {
            tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
            jTableProductsVendor.setModel(tableProductsVendor);
        } catch (Exception ex) {
            System.err.println("ERROR::" + ex);
            ////newXML.generateLog(ex.toString());
        }
    }//GEN-LAST:event_formWindowActivated

    private void jButtonRemoveProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveProductVendorActionPerformed
        List<String> listArg = new ArrayList<>();
        boolean ret = false;

        for (int i = 0; i < jTableProductsVendor.getRowCount(); i++) {

            if (jTableProductsVendor.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableProductsVendor.getValueAt(i, 1));

            }
        }
        if (!listArg.isEmpty()) {
            if (JOptionPane.showConfirmDialog(this, "Deseja realmente remover este produto do fornecedor? ", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                for (String listArg1 : listArg) {

                    ret = ClassVendor.removeProductVendor(listArg1, jTextFieldCodeVendorProductVendor.getText());

                    System.err.println("RETURN NO REMOVE::::" + ret);
                }
                if (ret) {

                    try {
                        tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                        jTableProductsVendor.setModel(tableProductsVendor);
                    } catch (Exception ex) {
                        System.err.println("ERROR::" + ex);
                        ////newXML.generateLog(ex.toString());
                    }
                    JOptionPane.showMessageDialog(this, "Produto(s) removido(s) com sucesso.");

                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao remover produto(s).");
                }
            }
        } else if (!jTextFieldBarCodeProductVendor.getText().isEmpty() && !jTextFieldDescriptionProductProductVendor.getText().isEmpty()) {

            if (JOptionPane.showConfirmDialog(this, "Deseja realmente remover este produto do fornecedor? ", "Alerta!", JOptionPane.YES_NO_OPTION) == 0) {
                if (!ClassVendor.conteinIsProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText())) {
                    ret = ClassVendor.removeProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText());

                    if (ret) {

                        try {
                            tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                            jTableProductsVendor.setModel(tableProductsVendor);
                        } catch (Exception ex) {
                            System.err.println("ERROR::" + ex);
                            ////newXML.generateLog(ex.toString());
                        }
                        JOptionPane.showMessageDialog(this, "Produto removido com sucesso.");

                    } else {
                        JOptionPane.showMessageDialog(this, "Erro ao remover produto.");
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "Este produto não esta na lista de produtos deste fornecedor, verifique.");
                }
            }
        } else {

            JOptionPane.showMessageDialog(this, "Para fazer a remoção de produto: \n-Selecione um produto na lista de produtos deste fornecedor;\n-Pesquise pelo pelo código de barra ou descrição.");
        }
    }//GEN-LAST:event_jButtonRemoveProductVendorActionPerformed

    private void jButtonAddProductVendorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddProductVendorActionPerformed
       
        List<String> listArg = new ArrayList<>();
        boolean ret = false;

        for (int i = 0; i < jTableProducts.getRowCount(); i++) {

            if (jTableProducts.getValueAt(i, 0).equals(true)) {
                listArg.add((String) jTableProducts.getValueAt(i, 1));

            }
        }
        if (!listArg.isEmpty()) {

            for (String listArg1 : listArg) {
                if (!ClassVendor.conteinIsProductVendor(listArg1, jTextFieldCodeVendorProductVendor.getText())) {
                    ret = ClassVendor.addProductVendor(listArg1, jTextFieldCodeVendorProductVendor.getText());

                } else {
                    JOptionPane.showMessageDialog(this, "Este produto já esta na lista de produtos deste fornecedor, verifique.");
                }
            }

            try {
                tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                jTableProductsVendor.setModel(tableProductsVendor);
            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }
            try {
                tableProducts = new MyModelJtableAllProductVendor(null);
                jTableProducts.setModel(tableProducts);
            } catch (Exception ex) {
                System.err.println("ERROR::" + ex);
                ////newXML.generateLog(ex.toString());
            }

            if (ret) {

                JOptionPane.showMessageDialog(this, "Produto adicionado com sucesso.");
                jTextFieldDescriptionProductProductVendor.setText("");
                jTextFieldBarCodeProductVendor.setText("");
                jTextFieldBarCodeProductVendor.requestFocus(true);

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao adicionar produto.");
            }

        } else if (!jTextFieldBarCodeProductVendor.getText().isEmpty() && !jTextFieldDescriptionProductProductVendor.getText().isEmpty()) {

            if (!ClassVendor.conteinIsProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText())) {
                ret = ClassVendor.addProductVendor(jTextFieldBarCodeProductVendor.getText(), jTextFieldCodeVendorProductVendor.getText());

                if (ret) {

                    try {
                        tableProductsVendor = new MyModelJtableProductVendor(jTextFieldCodeVendorProductVendor.getText());
                        jTableProductsVendor.setModel(tableProductsVendor);
                    } catch (Exception ex) {
                        System.err.println("ERROR::" + ex);
                        ////newXML.generateLog(ex.toString());
                    }
                    JOptionPane.showMessageDialog(this, "Produto adicionado com sucesso.");

                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao adicionar produto.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Este produto já esta na lista de produtos deste fornecedor, verifique.");
            }

        } else {

            JOptionPane.showMessageDialog(this, "Para fazer a adição de produto: \n-Selecione um produto na lista de produtos deste fornecedor;\n-Pesquise pelo pelo código de barra ou descrição.");
        }
    }//GEN-LAST:event_jButtonAddProductVendorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            System.err.println("ERROR::" + ex);
            //newXML.generateLog(ex.toString());
            java.util.logging.Logger.getLogger(JDialogProductVendor_3_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JDialogProductVendor_3_2 dialog = new JDialogProductVendor_3_2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddProductVendor;
    private javax.swing.JButton jButtonRemoveProductVendor;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JPanel jPanelProducts;
    private javax.swing.JPanel jPanelProductsVendor;
    private javax.swing.JPanel jPanelSearchProduct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableProducts;
    private javax.swing.JTable jTableProductsVendor;
    public static javax.swing.JTextField jTextFieldBarCodeProductVendor;
    public static javax.swing.JTextField jTextFieldCodeVendorProductVendor;
    public static javax.swing.JTextField jTextFieldDescriptionProductProductVendor;
    public static javax.swing.JTextField jTextFieldNameVendorProductVendor;
    // End of variables declaration//GEN-END:variables

    class MyCellRenderer extends DefaultTableCellRenderer {

        public MyCellRenderer() {
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean focused,
                int row, int column) {
            super.getTableCellRendererComponent(table, value, selected, focused, row, column);

            Color bg;

            if (!selected) {
                bg = ((row % 2 == 0)
                        ? alternateColor
                        : whiteColor);
            } else {
                bg = selectedColor;
            }

            if (jTableProducts.getRowCount() > 0) {

                jTableProducts.getColumnModel().getColumn(0).setPreferredWidth(5);
                jTableProducts.getColumnModel().getColumn(1).setPreferredWidth(110);// define a largura da coluna
                jTableProducts.getColumnModel().getColumn(2).setPreferredWidth(350);
            }
            if (jTableProductsVendor.getRowCount() > 0) {

                jTableProductsVendor.getColumnModel().getColumn(0).setPreferredWidth(5);
                jTableProductsVendor.getColumnModel().getColumn(1).setPreferredWidth(110);// define a largura da coluna
                jTableProductsVendor.getColumnModel().getColumn(2).setPreferredWidth(350);
            }

            //jTableItens.setShowHorizontalLines(false);
            //jTableItens.setShowVerticalLines(false);
            setBackground(bg);
            setForeground(selected
                    ? Color.black
                    : new java.awt.Color(102, 102, 102));
            setHorizontalAlignment(SwingConstants.CENTER);

            /*
             *  if (value instanceof ImageIcon) {
             * setIcon((ImageIcon) value);
             * setText("");
             * } else
             * setIcon(null);
             */
            return this;
        }
    }
}
